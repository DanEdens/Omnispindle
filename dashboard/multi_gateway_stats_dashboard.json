[{"id":"b7a2e1c0ad0c4a39","type":"mqtt in","z":"5b8625b7fcd2c6db","name":"Gateway Stats MQTT Input","topic":"projects/em-beta/subscriptions/gateway-stats/#","qos":"2","datatype":"json","broker":"5b41a831.e6efd8","nl":false,"rap":true,"rh":0,"inputs":0,"x":150,"y":220,"wires":[["e79ae733640384ff","e5eeaf82157125e5"]]},{"id":"e79ae733640384ff","type":"debug","z":"5b8625b7fcd2c6db","name":"Debug: MQTT Payload","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":420,"y":60,"wires":[]},{"id":"e5eeaf82157125e5","type":"function","z":"5b8625b7fcd2c6db","name":"Process Gateway Stats","func":"// Process data from MongoDB collector\nconst now = Date.now();\n\n// Initialize or get stats from flow context\nlet gatewayList = flow.get('gatewayList') || [];\nlet gatewayStats = flow.get('gatewayStats') || {};\nlet sensorTypeSummary = flow.get('sensorTypeSummary') || {};\nlet dateList = flow.get('dateList') || [];\nlet dateBasedStats = flow.get('dateBasedStats') || {};\n\n// Process topic to extract date information\nlet collectionDate = 'current';\nif (msg.topic && msg.topic.includes('/')) {\n    // Extract date from topic if available (format: projects/em-beta/subscriptions/gateway-stats/YYYY-MM-DD)\n    const topicParts = msg.topic.split('/');\n    if (topicParts.length > 3) {\n        const possibleDate = topicParts[topicParts.length - 1];\n        // Simple validation for date format (YYYY-MM-DD)\n        if (/^\\d{4}-\\d{2}-\\d{2}$/.test(possibleDate)) {\n            collectionDate = possibleDate;\n\n            // Add to date list if not already there\n            if (!dateList.includes(collectionDate)) {\n                dateList.push(collectionDate);\n                // Sort dates in descending order (newest first)\n                dateList.sort((a, b) => {\n                    if (a === 'current') return -1;\n                    if (b === 'current') return 1;\n                    return Number(new Date(b)) - Number(new Date(a));\n                });\n                flow.set('dateList', dateList);\n            }\n        }\n    }\n}\n\n// Process incoming payload\nif (msg.payload && typeof msg.payload === 'object') {\n    try {\n        // Get the timestamp for this update\n        const updateTimestamp = now;\n\n        // Initialize date stats if new\n        if (!dateBasedStats[collectionDate]) {\n            dateBasedStats[collectionDate] = {\n                gatewayList: [],\n                gatewayStats: {},\n                sensorTypeSummary: {},\n                lastUpdate: updateTimestamp\n            };\n        }\n\n        // Reference to current date's stats\n        let currentDateStats = dateBasedStats[collectionDate];\n\n        // Check if we have a direct gateway message or a collection of gateways\n        if (msg.payload.gateway) {\n            // Process a single gateway\n            const gateway = msg.payload.gateway;\n\n            // Store or update in the gateway list for this date\n            if (!currentDateStats.gatewayList.includes(gateway)) {\n                currentDateStats.gatewayList.push(gateway);\n            }\n\n            // Store or update in the global gateway list\n            if (!gatewayList.includes(gateway)) {\n                gatewayList.push(gateway);\n                flow.set('gatewayList', gatewayList);\n            }\n\n            // Update gateway stats for this date\n            currentDateStats.gatewayStats[gateway] = {\n                ...msg.payload,\n                lastUpdate: updateTimestamp,\n                collectionDate: collectionDate\n            };\n\n            // If this is the current date, also update the main gateway stats\n            if (collectionDate === 'current') {\n                gatewayStats[gateway] = {\n                    ...msg.payload,\n                    lastUpdate: updateTimestamp,\n                    collectionDate: collectionDate\n                };\n            }\n        } else {\n            // Process multiple gateways\n            Object.keys(msg.payload).forEach(key => {\n                // Skip the special entries\n                if (key === 'sensorTypes' || key === 'meta') {\n                    return;\n                }\n\n                const gateway = key;\n                const stats = msg.payload[key];\n\n                // Add to date-specific gateway list if new\n                if (!currentDateStats.gatewayList.includes(gateway)) {\n                    currentDateStats.gatewayList.push(gateway);\n                }\n\n                // Add to global gateway list if new\n                if (!gatewayList.includes(gateway)) {\n                    gatewayList.push(gateway);\n                }\n\n                // Update gateway stats for this date\n                currentDateStats.gatewayStats[gateway] = {\n                    ...stats,\n                    lastUpdate: stats.lastUpdate || updateTimestamp,\n                    collectionDate: collectionDate\n                };\n\n                // If this is the current date, also update the main gateway stats\n                if (collectionDate === 'current') {\n                    gatewayStats[gateway] = {\n                        ...stats,\n                        lastUpdate: stats.lastUpdate || updateTimestamp,\n                        collectionDate: collectionDate\n                    };\n                }\n            });\n\n            // Store updated gateway lists\n            flow.set('gatewayList', gatewayList);\n\n            // Process global sensor types if available\n            if (msg.payload.sensorTypes) {\n                currentDateStats.sensorTypeSummary = msg.payload.sensorTypes;\n\n                // If this is the current date, update the main sensor type summary\n                if (collectionDate === 'current') {\n                    sensorTypeSummary = msg.payload.sensorTypes;\n                    flow.set('sensorTypeSummary', sensorTypeSummary);\n                }\n            }\n        }\n\n        // Store updated date-based stats\n        flow.set('dateBasedStats', dateBasedStats);\n\n        // If we're processing current data, update the main gateway stats\n        if (collectionDate === 'current') {\n            flow.set('gatewayStats', gatewayStats);\n        }\n\n        // Create aggregate stats for all gateways for this date\n        const dateGatewayStats = currentDateStats.gatewayStats;\n        const totalElements = Object.values(dateGatewayStats).reduce((sum, gateway) => sum + (gateway.elements || 0), 0);\n        const totalRecentReadings = Object.values(dateGatewayStats).reduce((sum, gateway) => sum + (gateway.recentReadings || 0), 0);\n        const totalDataPoints = Object.values(dateGatewayStats).reduce((sum, gateway) => sum + (gateway.dataPoints || 0), 0);\n\n        // Get unique sensor types across all gateways for this date\n        const sensorTypes = {};\n        Object.values(dateGatewayStats).forEach(gateway => {\n            if (gateway.sensorTypes) {\n                Object.entries(gateway.sensorTypes).forEach(([type, count]) => {\n                    if (!sensorTypes[type]) {\n                        sensorTypes[type] = 0;\n                    }\n                    sensorTypes[type] += count;\n                });\n            }\n        });\n\n        // Build summary data for UI\n        const summary = {\n            gateways: currentDateStats.gatewayList.length,\n            totalElements: totalElements,\n            totalReadings: totalRecentReadings,\n            totalDataPoints: totalDataPoints,\n            sensorTypeCount: Object.keys(sensorTypes).length,\n            lastUpdate: updateTimestamp,\n            collectionDate: collectionDate\n        };\n\n        // Build the complete UI payload\n        const uiPayload = {\n            summary: summary,\n            gateways: dateGatewayStats,\n            sensorTypes: currentDateStats.sensorTypeSummary || sensorTypes,\n            gatewayList: currentDateStats.gatewayList,\n            dateList: dateList,\n            selectedDate: collectionDate,\n            dateBasedStats: dateBasedStats,\n            allGateways: gatewayList\n        };\n\n        return { payload: uiPayload };\n    } catch (e) {\n        node.error(`Error processing gateway stats: ${e.message}`);\n        node.error(e.stack);\n\n        return {\n            payload: {\n                summary: {\n                    gateways: gatewayList.length,\n                    lastUpdate: now,\n                    error: e.message,\n                    collectionDate: collectionDate\n                },\n                gateways: gatewayStats,\n                sensorTypes: sensorTypeSummary,\n                gatewayList: gatewayList,\n                dateList: dateList,\n                selectedDate: collectionDate\n            }\n        };\n    }\n}","outputs":1,"timeout":"","noerr":0,"initialize":"// Initialize data structures\nflow.set('gatewayList', []);\nflow.set('gatewayStats', {});\nflow.set('sensorTypeSummary', {});\nflow.set('dateList', ['current']);\nflow.set('dateBasedStats', {\n    current: {\n        gatewayList: [],\n        gatewayStats: {},\n        sensorTypeSummary: {},\n        lastUpdate: Date.now()\n    }\n});\n","finalize":"","libs":[],"x":470,"y":260,"wires":[["2df224c04f4084a9"]]},{"id":"2df224c04f4084a9","type":"function","z":"5b8625b7fcd2c6db","name":"UI Controller","func":"// Route data to the appropriate UI components\nreturn [\n    { payload: msg.payload },  // Summary panel\n    { payload: msg.payload }   // Gateway details\n];\n","outputs":2,"noerr":0,"initialize":"","finalize":"","libs":[],"x":770,"y":220,"wires":[["08108b0729062eae"],["23bdb805ee9f3cbc"]]},{"id":"08108b0729062eae","type":"ui_template","z":"5b8625b7fcd2c6db","group":"01144bf6140e519a","name":"Gateway Summary","order":1,"width":"12","height":"6","format":"<div ng-init=\"init()\" id=\"gateway-summary\">\n  <div class=\"summary-header\">\n    <h2>Gateway Statistics Summary</h2>\n    <div class=\"date-controls\">\n      <div class=\"date-selector\" ng-if=\"dateList.length > 0\">\n        <label for=\"summary-date-select\">Collection Date:</label>\n        <select id=\"summary-date-select\" ng-model=\"selectedDate\" ng-change=\"updateSelectedDate()\">\n          <option ng-repeat=\"date in dateList track by $index\" value=\"{{date}}\">\n            {{formatDate(date)}}\n          </option>\n        </select>\n      </div>\n    </div>\n    <div class=\"date-info\">\n      <span class=\"collection-date\">Collection Date: {{formatDate(summary.collectionDate || 'current')}}</span>\n      <span class=\"last-update\">Last Update: {{formatTime(summary.lastUpdate)}}</span>\n    </div>\n  </div>\n  \n  <div class=\"summary-cards\">\n    <div class=\"summary-card\">\n      <div class=\"card-value\">{{summary.gateways}}</div>\n      <div class=\"card-label\">Gateways</div>\n    </div>\n    \n    <div class=\"summary-card\">\n      <div class=\"card-value\">{{formatNumber(summary.totalElements)}}</div>\n      <div class=\"card-label\">Unique Elements</div>\n    </div>\n    \n    <div class=\"summary-card\">\n      <div class=\"card-value\">{{formatNumber(summary.totalDataPoints || summary.totalReadings)}}</div>\n      <div class=\"card-label\">Total Data Points</div>\n    </div>\n    \n    <div class=\"summary-card\">\n      <div class=\"card-value\">{{summary.sensorTypeCount}}</div>\n      <div class=\"card-label\">Sensor Types</div>\n    </div>\n  </div>\n  \n  <!-- Sensor Type Distribution -->\n  <div class=\"sensor-distribution\" ng-if=\"sensorTypes && Object.keys(sensorTypes).length > 0\">\n    <h3>Sensor Type Distribution</h3>\n    <canvas id=\"sensorDistributionChart\" height=\"200\"></canvas>\n  </div>\n</div>\n\n<style>\n#gateway-summary {\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  padding: 0 15px;\n}\n\n.summary-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  margin-bottom: 20px;\n  flex-wrap: wrap;\n}\n\n.date-controls {\n  display: flex;\n  flex-direction: column;\n  margin-top: 5px;\n}\n\n.date-selector {\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n}\n\n.date-selector label {\n  margin-right: 10px;\n  font-weight: 500;\n  white-space: nowrap;\n}\n\n.date-selector select {\n  padding: 8px 12px;\n  border-radius: 4px;\n  border: 1px solid #ddd;\n  font-size: 14px;\n  min-width: 150px;\n}\n\n.date-info {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  gap: 5px;\n}\n\n.collection-date, .last-update {\n  font-size: 14px;\n  color: #7f8c8d;\n}\n\nh2 {\n  margin: 0;\n  color: #2c3e50;\n  font-weight: 400;\n}\n\nh3 {\n  color: #2c3e50;\n  font-weight: 400;\n  margin-top: 25px;\n  margin-bottom: 15px;\n}\n\n.summary-cards {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 15px;\n  margin-bottom: 25px;\n}\n\n.summary-card {\n  background: #fff;\n  border-radius: 8px;\n  padding: 20px;\n  text-align: center;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  transition: transform 0.2s, box-shadow 0.2s;\n}\n\n.summary-card:hover {\n  transform: translateY(-5px);\n  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);\n}\n\n.card-value {\n  font-size: 28px;\n  font-weight: 600;\n  color: #3498db;\n  margin-bottom: 8px;\n}\n\n.card-label {\n  font-size: 14px;\n  color: #7f8c8d;\n}\n\n.sensor-distribution {\n  background: #fff;\n  border-radius: 8px;\n  padding: 20px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  margin-top: 20px;\n}\n\n@media (max-width: 768px) {\n  .summary-header {\n    flex-direction: column;\n    align-items: flex-start;\n  }\n  \n  .date-controls {\n    width: 100%;\n    margin-bottom: 10px;\n  }\n  \n  .date-selector {\n    width: 100%;\n  }\n  \n  .date-selector select {\n    width: 100%;\n  }\
\n  .date-info {\n    align-items: flex-start;\n    margin-top: 10px;\n  }\n}\n</style>\n\n<script>\n(function(scope) {\n  let sensorChart = null;\n  \n  scope.init = function() {\n    scope.summary = {};\n    scope.sensorTypes = {};\n    scope.dateList = ['current'];\n    scope.selectedDate = 'current';\n    scope.dateBasedStats = {};\n    \n    scope.formatTime = function(timestamp) {\n      if (!timestamp) return 'Never';\n      const date = new Date(timestamp);\n      return date.toLocaleTimeString() + ' ' + date.toLocaleDateString();\n    };\n    \n    scope.formatDate = function(dateStr) {\n      if (!dateStr) return 'Unknown';\n      if (dateStr === 'current') return 'Current';\n      \n      try {\n        const date = new Date(dateStr);\n        return date.toLocaleDateString();\n      } catch (e) {\n        return dateStr;\n      }\n    };\n    \n    scope.formatNumber = function(number) {\n      if (number === undefined || number === null) return '0';\n      return number.toLocaleString();\n    };\n    \n    scope.updateSelectedDate = function() {\n      if (!scope.dateBasedStats || !scope.selectedDate) return;\n      \n      // If we have data for this date, update the displayed summary and sensor types\n      if (scope.dateBasedStats[scope.selectedDate]) {\n        const dateStats = scope.dateBasedStats[scope.selectedDate];\n        \n        // Update summary with data for the selected date\n        if (dateStats.summary) {\n          scope.summary = dateStats.summary;\n        }\n        \n        // Update sensor types with data for the selected date\n        if (dateStats.sensorTypes) {\n          scope.sensorTypes = dateStats.sensorTypes;\n          updateSensorChart();\n        }\n      }\n    };\n    \n    function updateSensorChart() {\n      if (!scope.sensorTypes || Object.keys(scope.sensorTypes).length === 0) return;\n      \n      setTimeout(() => {\n        const ctx = document.getElementById('sensorDistributionChart');\n        if (!ctx) return;\n        \n        // Get sensor type data\n        let labels = [];\n        let data = [];\n        let colors = [];\n        \n        const baseColors = [\n          '#3498db', '#e74c3c', '#2ecc71', '#f39c12', '#9b59b6',\n          '#1abc9c', '#d35400', '#34495e', '#7f8c8d', '#27ae60',\n          '#2980b9', '#c0392b', '#16a085', '#8e44ad', '#f1c40f'\n        ];\n        \n        // Create ordered list of sensor types by count\n        const sortedTypes = Object.entries(scope.sensorTypes);\
\n        sortedTypes.sort((a, b) => {\n          // Sort by count if available, otherwise use the raw value\n          const countA = a[1].count !== undefined ? a[1].count : a[1];\n          const countB = b[1].count !== undefined ? b[1].count : b[1];\n          return countB - countA;\n        });\
\n        \n        // Limit to top 10 for better visualization\n        const topTypes = sortedTypes.slice(0, 10);\n        \n        // Prepare data arrays\n        topTypes.forEach((entry, index) => {\n          const [type, value] = entry;\n          labels.push(type);\n          // Check if the value is an object with count or a direct number\n          data.push(value.count !== undefined ? value.count : value);\n          colors.push(baseColors[index % baseColors.length]);\n        });\n        \n        // Destroy previous chart if exists\n        if (sensorChart) {\n          sensorChart.destroy();\n        }\n        \n        // Create new chart\n        sensorChart = new Chart(ctx, {\n          type: 'doughnut',\n          data: {\n            labels: labels,\n            datasets: [{\n              data: data,\n              backgroundColor: colors,\n              borderColor: '#fff',\n              borderWidth: 2\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n              legend: {\n                position: 'right',\n                labels: {\n                  boxWidth: 15,\n                  padding: 15\n                }\n              },\n              tooltip: {\n                callbacks: {\n                  label: function(context) {\n                    let label = context.label || '';\n                    let value = context.raw;\n                    let percentage = Math.round((value / data.reduce((a, b) => a + b, 0)) * 100);\n                    return `${label}: ${value.toLocaleString()} (${percentage}%)`;\n                  }\n                }\n              }\n            },\n            cutout: '60%'\n          }\n        });\n      }, 100);\n    }\n    \n    scope.$watch('msg.payload', function(payload) {\n      if (!payload) return;\n      \n      // Update date list and date-based stats\n      if (payload.dateList) {\n        scope.dateList = payload.dateList;\n      }\n      \n      if (payload.dateBasedStats) {\n        scope.dateBasedStats = payload.dateBasedStats;\n      }\n      \n      // Update selected date if provided in the payload\n      if (payload.selectedDate && scope.dateList.includes(payload.selectedDate)) {\n        scope.selectedDate = payload.selectedDate;\n      }\n      \n      // Update main summary and sensor type data from the payload\n      scope.summary = payload.summary || {};\n      scope.sensorTypes = payload.sensorTypes || {};\n      \n      // Update the chart with new data\n      updateSensorChart();\n    });\n  };\n})(scope);\n</script>\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>","storeOutMessages":true,"fwdInMessages":true,"resendOnRefresh":true,"templateScope":"local","className":"","x":1050,"y":160,"wires":[[]]},{"id":"23bdb805ee9f3cbc","type":"ui_template","z":"5b8625b7fcd2c6db","group":"fb58d34d9de974e8","name":"Gateway Details","order":1,"width":"12","height":"10","format":"<div ng-init=\"init()\" id=\"gateway-details\">\n  <div class=\"details-header\">\n    <h2>Gateway Statistics Details</h2>\n    <div class=\"control-panel\">\n      <!-- Date Selector -->\n      <div class=\"date-selector\" ng-if=\"dateList.length > 0\">\n        <label for=\"date-select\">Collection Date:</label>\n        <select id=\"date-select\" ng-model=\"selectedDate\" ng-change=\"updateSelectedDate()\">\n          <option ng-repeat=\"date in dateList track by $index\" value=\"{{date}}\">\n            {{formatDateDisplay(date)}}\n          </option>\n        </select>\n      </div>\n      \n      <!-- Gateway Selector -->\n      <div class=\"gateway-selector\" ng-if=\"gatewayList.length > 0\">\n        <label for=\"gateway-select\">Gateway:</label>\n        <select id=\"gateway-select\" ng-model=\"selectedGateway\" ng-change=\"updateSelectedGateway()\">\n          <option value=\"\">All Gateways</option>\n          <option ng-repeat=\"gateway in gatewayList track by $index\" value=\"{{gateway}}\">\n            {{formatGatewayName(gateway)}}\n          </option>\n        </select>\n      </div>\n      \n      <!-- Comparison Selector -->\n      <div class=\"comparison-selector\" ng-if=\"dateList.length > 1 && selectedGateway\">\n        <label for=\"compare-select\">Compare with:</label>\n        <select id=\"compare-select\" ng-model=\"comparisonDate\" ng-change=\"updateComparison()\">\n          <option value=\"\">No comparison</option>\n          <option ng-repeat=\"date in dateList track by $index\" value=\"{{date}}\" ng-if=\"date !== selectedDate\">\n            {{formatDateDisplay(date)}}\n          </option>\n        </select>\n      </div>\n    </div>\n  </div>\n  \n  <!-- No Gateways Message -->\n  <div class=\"no-data\" ng-if=\"gatewayList.length === 0\">\n    <p>No gateway data available</p>\n  </div>\n  \n  <!-- All Gateways Overview -->\n  <div class=\"all-gateways\" ng-if=\"gatewayList.length > 0 && !selectedGateway\">\n    <div class=\"section-header\">\n      <h3>All Gateways Overview</h3>\n      <span class=\"collection-date\">Collection Date: {{formatDateDisplay(selectedDate)}}</span>\n    </div>\n    \n    <div class=\"gateway-grid\">\n      <div class=\"gateway-card\" ng-repeat=\"gateway in gatewayList track by $index\" ng-click=\"selectGateway(gateway)\">\n        <div class=\"gateway-header\">\n          <h4>{{formatGatewayName(gateway)}}</h4>\n          <span class=\"last-seen\">Last seen: {{formatTime(gateways[gateway].lastUpdate)}}</span>\n        </div>\n        <div class=\"gateway-stats\">\n          <div class=\"stat-item\">\n            <span class=\"stat-value\">{{gateways[gateway].elements || 0}}</span>\n            <span class=\"stat-label\">Unique Elements</span>\n          </div>\n          <div class=\"stat-item\">\n            <span class=\"stat-value\">{{gateways[gateway].dataPoints || gateways[gateway].recentReadings || 0}}</span>\n            <span class=\"stat-label\">Data Points</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  \n  <!-- Selected Gateway Details -->\n  <div class=\"selected-gateway\" ng-if=\"selectedGateway && gateways[selectedGateway]\">\n    <div class=\"gateway-details-header\">\n      <div class=\"gateway-title\">\n        <h3>{{formatGatewayName(selectedGateway)}}</h3>\n        <span class=\"gateway-id\">ID: {{selectedGateway}}</span>\n      </div>\n      <span class=\"last-update\">Last Update: {{formatTime(gateways[selectedGateway].lastUpdate)}}</span>\
\n    </div>\n    \n    <div class=\"stats-section\">\n      <div class=\"section-header\">\n        <h4>Statistics</h4>\n        <span class=\"collection-date\">Collection Date: {{formatDateDisplay(selectedDate)}}</span>\n      </div>\n      \n      <div class=\"stats-grid\">\n        <div class=\"stat-box\">\n          <div class=\"stat-value\">{{gateways[selectedGateway].elements || 0}}</div>\n          <div class=\"stat-label\">Unique Elements</div>\n          <div class=\"stat-comparison\" ng-if=\"showComparison && comparisonStats\">\n            <span ng-class=\"getComparisonClass(gateways[selectedGateway].elements, comparisonStats.elements)\">\n              {{getComparisonDisplay(gateways[selectedGateway].elements, comparisonStats.elements)}}\n            </span>\n          </div>\n        </div>\n        \n        <div class=\"stat-box\">\n          <div class=\"stat-value\">{{gateways[selectedGateway].dataPoints || gateways[selectedGateway].recentReadings || 0}}</div>\n          <div class=\"stat-label\">Total Data Points</div>\n          <div class=\"stat-description\">Each data point is an entry in pubsub_message.data array</div>\n          <div class=\"stat-comparison\" ng-if=\"showComparison && comparisonStats\">\n            <span ng-class=\"getComparisonClass(getDataPoints(gateways[selectedGateway]), getDataPoints(comparisonStats))\">\n              {{getComparisonDisplay(getDataPoints(gateways[selectedGateway]), getDataPoints(comparisonStats))}}\n            </span>\n          </div>\n        </div>\n        \n        <div class=\"stat-box\">\n          <div class=\"stat-value\">{{getUniqueCount(selectedGateway, 'mac_address')}}</div>\n          <div class=\"stat-label\">Unique MAC Addresses</div>\n          <div class=\"stat-comparison\" ng-if=\"showComparison && comparisonStats\">\n            <span ng-class=\"getComparisonClass(getUniqueCount(selectedGateway, 'mac_address'), getUniqueCountFromStats(comparisonStats, 'mac_address'))\">\n              {{getComparisonDisplay(getUniqueCount(selectedGateway, 'mac_address'), getUniqueCountFromStats(comparisonStats, 'mac_address'))}}\n            </span>\n          </div>\n        </div>\n        \n        <div class=\"stat-box\">\n          <div class=\"stat-value\">{{getSensorTypeCount(selectedGateway)}}</div>\n          <div class=\"stat-label\">Sensor Types</div>\n          <div class=\"stat-comparison\" ng-if=\"showComparison && comparisonStats\">\n            <span ng-class=\"getComparisonClass(getSensorTypeCount(selectedGateway), getSensorTypeCountFromStats(comparisonStats))\">\n              {{getComparisonDisplay(getSensorTypeCount(selectedGateway), getSensorTypeCountFromStats(comparisonStats))}}\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Comparison Summary Section -->\n    <div class=\"comparison-section\" ng-if=\"showComparison && comparisonStats\">\n      <div class=\"section-header\">\n        <h4>Comparison with {{formatDateDisplay(comparisonDate)}}</h4>\n      </div>\n      \n      <div class=\"comparison-chart-container\">\n        <canvas id=\"comparisonChart\" height=\"200\"></canvas>\n      </div>\n    </div>\n    \n    <!-- Sensor Types Section -->\n    <div class=\"sensor-types-section\" ng-if=\"gateways[selectedGateway].sensorTypes && Object.keys(gateways[selectedGateway].sensorTypes).length > 0\">\n      <div class=\"section-header\">\n        <h4>Sensor Types</h4>\n      </div>\n      \n      <div class=\"sensor-chart-container\">\n        <canvas id=\"gatewayPieChart\" height=\"260\"></canvas>\n      </div>\n      \n      <div class=\"sensor-type-list\">\n        <div class=\"sensor-type-item\" ng-repeat=\"(type, count) in gateways[selectedGateway].sensorTypes\">\n          <div class=\"sensor-type-name\">{{type}}</div>\n          <div class=\"sensor-type-count\">{{count}} data points</div>\n          <div class=\"stat-comparison\" ng-if=\"showComparison && comparisonStats && comparisonStats.sensorTypes && comparisonStats.sensorTypes[type]\">\n            <span ng-class=\"getComparisonClass(count, comparisonStats.sensorTypes[type])\">\n              {{getComparisonDisplay(count, comparisonStats.sensorTypes[type])}}\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<style>\n#gateway-details {\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  padding: 0 15px;\n}\n\n.details-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  margin-bottom: 20px;\n  flex-wrap: wrap;\n}\n\n.control-panel {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 15px;\n  align-items: center;\n}\n\n.date-selector,\n.gateway-selector,\n.comparison-selector {\n  display: flex;\n  align-items: center;\n}\n\n.collection-date {\n  font-size: 13px;\n  color: #7f8c8d;\n  margin-left: 10px;\n}\n\n.date-selector label,\n.gateway-selector label,\n.comparison-selector label {\n  margin-right: 10px;\n  font-weight: 500;\n  white-space: nowrap;\n}\n\n.date-selector select,\n.gateway-selector select,\n.comparison-selector select {\n  padding: 8px 12px;\n  border-radius: 4px;\n  border: 1px solid #ddd;\n  font-size: 14px;\n  min-width: 150px;\n}\n\nh2, h3, h4 {\n  margin: 0;\n  color: #2c3e50;\n  font-weight: 400;\n}\n\nh2 {\n  font-size: 24px;\n}\n\nh3 {\n  font-size: 20px;\n}\n\nh4 {\n  font-size: 18px;\n}\n\n.section-header {\n  margin-bottom: 15px;\n  border-bottom: 1px solid #eee;\n  padding-bottom: 8px;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.no-data {\n  background: #f9f9f9;\n  border-radius: 8px;\n  padding: 40px 20px;\n  text-align: center;\n  color: #7f8c8d;\n  font-style: italic;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\n}\n\n/* All Gateways Grid */\n.gateway-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 20px;\n  margin-bottom: 30px;\n}\n\n.gateway-card {\n  background: #fff;\n  border-radius: 8px;\n  padding: 15px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  cursor: pointer;\n  transition: transform 0.2s, box-shadow 0.2s;\n}\n\n.gateway-card:hover {\n  transform: translateY(-5px);\n  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);\n}\n\n.gateway-header {\n  margin-bottom: 15px;\n  border-bottom: 1px solid #eee;\n  padding-bottom: 10px;\n}\n\n.gateway-header h4 {\n  margin-bottom: 5px;\n  color: #3498db;\n}\n\n.last-seen {\n  font-size: 12px;\n  color: #7f8c8d;\n}\n\n.gateway-stats {\n  display: flex;\n  justify-content: space-between;\n}\n\n.stat-item {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 10px;\n  flex: 1;\n}\n\n.stat-value {\n  font-size: 20px;\n  font-weight: 600;\n  color: #2c3e50;\n}\n\n.stat-label {\n  font-size: 12px;\n  color: #7f8c8d;\n  margin-top: 5px;\n}\n\n.stat-description {\n  font-size: 10px;\n  color: #95a5a6;\n  font-style: italic;\n  margin-top: 5px;\n  line-height: 1.3;\n}\n\n.stat-comparison {\n  font-size: 12px;\n  margin-top: 8px;\n  padding: 3px 8px;\n  border-radius: 12px;\n  display: inline-block;\n}\n\n.comparison-increase {\n  color: #27ae60;\n}\n\n.comparison-decrease {\n  color: #e74c3c;\n}\n\n.comparison-neutral {\n  color: #7f8c8d;\n}\n\n/* Selected Gateway Details */\n.gateway-details-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  margin-bottom: 20px;\n}\n\n.gateway-title {\n  display: flex;\n  flex-direction: column;\n}\n\n.gateway-id {\n  font-size: 12px;\n  color: #7f8c8d;\n  margin-top: 5px;\n}\n\n.last-update {\n  font-size: 14px;\n  color: #7f8c8d;\n}\n\n.stats-section, .sensor-types-section, .comparison-section {\n  background: #fff;\n  border-radius: 8px;\n  padding: 20px;\n  margin-bottom: 25px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n}\n\n.stats-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 15px;\n}\n\n.stat-box {\n  text-align: center;\n  padding: 15px;\n  background: #f8f9fa;\n  border-radius: 6px;\n}\n\n.stat-box .stat-value {\n  font-size: 24px;\n  color: #3498db;\n  margin-bottom: 8px;\n}\n\n.sensor-chart-container, .comparison-chart-container {\n  margin-bottom: 20px;\n  height: 260px;\n}\n\n.comparison-chart-container {\n  height: 200px;\n}\n\n.sensor-type-list {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  gap: 10px;\n}\n\n.sensor-type-item {\n  background: #f8f9fa;\n  border-radius: 6px;\n  padding: 10px 15px;\n}\n\n.sensor-type-name {\n  font-weight: 600;\n  color: #2c3e50;\n  margin-bottom: 5px;\n}\n\n.sensor-type-count {\n  font-size: 14px;\n  color: #7f8c8d;\n}\n\n@media (max-width: 768px) {\n  .details-header {\n    flex-direction: column;\n    align-items: flex-start;\n  }\n  \n  .control-panel {\n    margin-top: 15px;\n    width: 100%;\n    flex-direction: column;\n    align-items: stretch;\n  }\n  \n  .date-selector,\n  .gateway-selector,\n  .comparison-selector {\n    width: 100%;\n    margin-bottom: 10px;\n  }\
\n  .date-selector select,\n  .gateway-selector select,\n  .comparison-selector select {\n    width: 100%;\n  }\
\n  .gateway-details-header {\n    flex-direction: column;\n  }\n  \n  .last-update {\n    margin-top: 10px;\n  }\n}\n</style>\n\n<script>\n(function(scope) {\n  let pieChart = null;\n  let comparisonChart = null;\n  \n  scope.init = function() {\n    scope.gatewayList = [];\n    scope.gateways = {};\n    scope.selectedGateway = '';\n    scope.dateList = [];\n    scope.selectedDate = 'current';\n    scope.comparisonDate = '';\n    scope.showComparison = false;\n    scope.comparisonStats = null;\n    scope.dateBasedStats = {};\n    \n    scope.formatTime = function(timestamp) {\n      if (!timestamp) return 'Never';\n      const date = new Date(timestamp);\n      return date.toLocaleTimeString() + ' ' + date.toLocaleDateString();\n    };\n    \n    scope.formatDateDisplay = function(dateStr) {\n      if (!dateStr) return 'Unknown';\n      if (dateStr === 'current') return 'Current';\n      \n      try {\n        const date = new Date(dateStr);\n        return date.toLocaleDateString();\n      } catch (e) {\n        return dateStr;\n      }\n    };\n    \n    scope.formatGatewayName = function(gateway) {\n      if (!gateway) return 'Unknown';\n      \n      // For long gateway IDs, truncate for display\n      if (gateway.length > 20) {\n        return gateway.substring(0, 8) + '...' + gateway.substring(gateway.length - 8);\n      }\n      return gateway;\n    };\n    \n    scope.selectGateway = function(gateway) {\n      scope.selectedGateway = gateway;\n      updateGatewayChart();\n      updateComparisonChart();\n    };\n    \n    scope.updateSelectedGateway = function() {\n      updateGatewayChart();\n      updateComparisonChart();\n    };\n    \n    scope.updateSelectedDate = function() {\n      updateDataForSelectedDate();\n      updateGatewayChart();\n      updateComparisonChart();\n    };\n    \n    scope.updateComparison = function() {\n      scope.showComparison = !!scope.comparisonDate;\n      \n      if (scope.showComparison && scope.selectedGateway && scope.dateBasedStats && \n          scope.dateBasedStats[scope.comparisonDate] && \n          scope.dateBasedStats[scope.comparisonDate].gatewayStats && \n          scope.dateBasedStats[scope.comparisonDate].gatewayStats[scope.selectedGateway]) {\n        scope.comparisonStats = scope.dateBasedStats[scope.comparisonDate].gatewayStats[scope.selectedGateway];\n      } else {\n        scope.comparisonStats = null;\n      }\n      \n      updateComparisonChart();\n    };\
    \n    function updateDataForSelectedDate() {\n      if (!scope.dateBasedStats || !scope.selectedDate || !scope.dateBasedStats[scope.selectedDate]) {\n        return;\n      }\n      \n      const dateStats = scope.dateBasedStats[scope.selectedDate];\n      scope.gatewayList = dateStats.gatewayList || [];\n      scope.gateways = dateStats.gatewayStats || {};\n      \n      // If the selected gateway no longer exists in this date's data, clear selection\n      if (scope.selectedGateway && !scope.gateways[scope.selectedGateway]) {\n        if (scope.gatewayList.length > 0) {\n          scope.selectedGateway = scope.gatewayList[0];\n        } else {\n          scope.selectedGateway = '';\n        }\n      }\
    }\n    \n    scope.getSensorTypeCount = function(gateway) {\n      if (!scope.gateways[gateway] || !scope.gateways[gateway].sensorTypes) {\n        return 0;\n      }\n      return Object.keys(scope.gateways[gateway].sensorTypes).length;\n    };\n    \n    scope.getSensorTypeCountFromStats = function(stats) {\n      if (!stats || !stats.sensorTypes) {\n        return 0;\n      }\n      return Object.keys(stats.sensorTypes).length;\n    };\n    \n    scope.getUniqueCount = function(gateway, field) {\n      if (!scope.gateways[gateway] || !scope.gateways[gateway].uniqueFields) {\n        return 0;\n      }\n      return scope.gateways[gateway].uniqueFields[field] || 0;\n    };\n    \n    scope.getUniqueCountFromStats = function(stats, field) {\n      if (!stats || !stats.uniqueFields) {\n        return 0;\n      }\n      return stats.uniqueFields[field] || 0;\n    };\n    \n    scope.getDataPoints = function(stats) {\n      if (!stats) return 0;\n      return stats.dataPoints || stats.recentReadings || 0;\n    };\n    \n    scope.getComparisonClass = function(current, previous) {\n      if (!current || !previous || current === previous) {\n        return 'comparison-neutral';\n      }\n      return current > previous ? 'comparison-increase' : 'comparison-decrease';\n    };\n    \n    scope.getComparisonDisplay = function(current, previous) {\n      if (!current || !previous) {\n        return 'N/A';\n      }\n      \n      if (current === previous) {\n        return 'No change';\n      }\n      \n      const diff = current - previous;\n      const percentChange = ((diff / previous) * 100).toFixed(1);\n      const sign = diff > 0 ? '+' : '';\n      \n      return `${sign}${diff} (${sign}${percentChange}%)`;\n    };\n    \n    function updateGatewayChart() {\n      if (!scope.selectedGateway || !scope.gateways[scope.selectedGateway]) return;\n      \n      const gateway = scope.gateways[scope.selectedGateway];\n      if (!gateway.sensorTypes || Object.keys(gateway.sensorTypes).length === 0) return;\n      \n      setTimeout(() => {\n        const ctx = document.getElementById('gatewayPieChart');\n        if (!ctx) return;\n        \n        // Prepare chart data\n        const labels = Object.keys(gateway.sensorTypes);\n        const data = labels.map(key => gateway.sensorTypes[key]);\n        \n        // Generate colors\n        const baseColors = [\n          '#3498db', '#e74c3c', '#2ecc71', '#f39c12', '#9b59b6',\n          '#1abc9c', '#d35400', '#34495e', '#7f8c8d', '#27ae60'\n        ];\n        \n        const colors = labels.map((_, i) => baseColors[i % baseColors.length]);\n        \n        // Destroy previous chart if exists\n        if (pieChart) {\n          pieChart.destroy();\n        }\n        \n        // Create new pie chart\n        pieChart = new Chart(ctx, {\n          type: 'pie',\n          data: {\n            labels: labels,\n            datasets: [{\n              data: data,\n              backgroundColor: colors,\n              borderColor: '#fff',\n              borderWidth: 2\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n              legend: {\n                position: 'bottom',\n                labels: {\n                  boxWidth: 15,\n                  padding: 15\n                }\n              },\n              tooltip: {\n                callbacks: {\n                  label: function(context) {\n                    let label = context.label || '';\n                    let value = context.raw;\n                    let percentage = Math.round((value / data.reduce((a, b) => a + b, 0)) * 100);\n                    return `${label}: ${value} (${percentage}%)`;\n                  }\n                }\n              }\n            }\n          }\n        });\n      }, 100);\n    }\n    \n    function updateComparisonChart() {\n      if (!scope.showComparison || !scope.selectedGateway || !scope.comparisonStats || !scope.gateways[scope.selectedGateway]) {\n        return;\n      }\n      \n      const currentStats = scope.gateways[scope.selectedGateway];\n      \n      setTimeout(() => {\n        const ctx = document.getElementById('comparisonChart');\n        if (!ctx) return;\n        \n        // Comparison metrics\n        const metrics = [\n          { label: 'Elements', current: currentStats.elements || 0, comparison: scope.comparisonStats.elements || 0 },\n          { label: 'Data Points', current: scope.getDataPoints(currentStats), comparison: scope.getDataPoints(scope.comparisonStats) },\n          { label: 'Sensor Types', current: scope.getSensorTypeCount(scope.selectedGateway), comparison: scope.getSensorTypeCountFromStats(scope.comparisonStats) }\n        ];\n        \n        // Destroy previous chart if exists\n        if (comparisonChart) {\n          comparisonChart.destroy();\n        }\n        \n        // Create new comparison chart\n        comparisonChart = new Chart(ctx, {\n          type: 'bar',\n          data: {\n            labels: metrics.map(m => m.label),\n            datasets: [\n              {\n                label: scope.formatDateDisplay(scope.selectedDate),\n                data: metrics.map(m => m.current),\n                backgroundColor: '#3498db',\n                borderColor: '#2980b9',\n                borderWidth: 1\n              },\n              {\n                label: scope.formatDateDisplay(scope.comparisonDate),\n                data: metrics.map(m => m.comparison),\n                backgroundColor: '#e74c3c',\n                borderColor: '#c0392b',\n                borderWidth: 1\n              }\n            ]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            scales: {\n              y: {\n                beginAtZero: true\n              }\n            },\n            plugins: {\n              legend: {\n                position: 'top'\n              },\n              tooltip: {\n                callbacks: {\n                  label: function(context) {\n                    let label = context.dataset.label || '';\n                    let value = context.raw;\n                    return `${label}: ${value}`;\n                  }\n                }\n              }\n            }\n          }\n        });\n      }, 100);\n    }\n    \n    scope.$watch('msg.payload', function(payload) {\n      if (!payload) return;\n      \n      scope.dateList = payload.dateList || ['current'];\n      scope.dateBasedStats = payload.dateBasedStats || {};\n      \n      // If we have a selectedDate from the payload, use it\n      if (payload.selectedDate && scope.dateList.includes(payload.selectedDate)) {\n        scope.selectedDate = payload.selectedDate;\n      } else if (scope.dateList.length > 0 && !scope.dateList.includes(scope.selectedDate)) {\n        // If the current selectedDate is not in the dateList, use the first date\n        scope.selectedDate = scope.dateList[0];\n      }\n      \n      // Update data for the selected date\n      updateDataForSelectedDate();\n      \n      // If we have a new gateway list but no selection, select the first gateway\n      if (scope.gatewayList.length > 0 && !scope.selectedGateway) {\n        scope.selectedGateway = scope.gatewayList[0];\n      }\n      \n      // If comparison date is set, update comparison data\n      if (scope.comparisonDate) {\n        scope.updateComparison();\n      }\n      \n      // Update charts\n      updateGatewayChart();\n      updateComparisonChart();\n    });\n  };\n})(scope);\n</script>\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>","storeOutMessages":true,"fwdInMessages":true,"resendOnRefresh":true,"templateScope":"local","className":"","x":1060,"y":260,"wires":[[]]},{"id":"671507624fa15c86","type":"inject","z":"5b8625b7fcd2c6db","name":"Auto Refresh (1 min)","props":[{"p":"payload"}],"repeat":"60","crontab":"","once":true,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":180,"y":360,"wires":[["e5eeaf82157125e5"]]},{"id":"5b41a831.e6efd8","type":"mqtt-broker","name":"AWS Mqtt Broker","broker":"localhost","port":"3003","clientid":"local-node-red","autoConnect":true,"usetls":false,"compatmode":false,"protocolVersion":"4","keepalive":"60","cleansession":false,"autoUnsubscribe":true,"birthTopic":"status/DvtLabMonitor/alive","birthQos":"1","birthRetain":"true","birthPayload":"1","birthMsg":{},"closeTopic":"status/DvtLabMonitor/alive","closeQos":"1","closeRetain":"true","closePayload":"0","closeMsg":{},"willTopic":"status/DvtLabMonitor/alive","willQos":"1","willRetain":"true","willPayload":"0","willMsg":{},"userProps":"","sessionExpiry":""},{"id":"01144bf6140e519a","type":"ui_group","name":"Gateway Summary","tab":"gateway_stats_tab","order":1,"disp":true,"width":"12","collapse":false},{"id":"fb58d34d9de974e8","type":"ui_group","name":"Gateway Details","tab":"gateway_stats_tab","order":2,"disp":true,"width":"12","collapse":false},{"id":"gateway_stats_tab","type":"ui_tab","name":"Gateway Statistics","icon":"dashboard","disabled":false,"hidden":false}]
