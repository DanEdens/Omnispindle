[
    {
        "id": "multi-gateway-stats",
        "type": "tab",
        "label": "Multi-Gateway Statistics",
        "disabled": false,
        "info": "Dashboard showing consolidated statistics for multiple gateways with sensor type analytics"
    },
    {
        "id": "mqtt-gateway-stats-in",
        "type": "mqtt in",
        "z": "multi-gateway-stats",
        "name": "Gateway Stats MQTT Input",
        "topic": "projects/em-beta/subscriptions/gateway-stats",
        "qos": "2",
        "datatype": "json",
        "broker": "",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 170,
        "y": 120,
        "wires": [
            [
                "mqtt-debug",
                "process-gateway-stats"
            ]
        ]
    },
    {
        "id": "mqtt-debug",
        "type": "debug",
        "z": "multi-gateway-stats",
        "name": "Debug: MQTT Payload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 60,
        "wires": []
    },
    {
        "id": "process-gateway-stats",
        "type": "function",
        "z": "multi-gateway-stats",
        "name": "Process Gateway Stats",
        "func": "// Process data from MongoDB collector\nconst now = Date.now();\n\n// Initialize or get stats from flow context\nlet gatewayList = flow.get('gatewayList') || [];\nlet gatewayStats = flow.get('gatewayStats') || {};\nlet sensorTypeSummary = flow.get('sensorTypeSummary') || {};\n\n// Process incoming payload\nif (msg.payload && typeof msg.payload === 'object') {\n    try {\n        // Get the timestamp for this update\n        const updateTimestamp = now;\n        \n        // Check if we have a direct gateway message or a collection of gateways\n        if (msg.payload.gateway) {\n            // Process a single gateway\n            const gateway = msg.payload.gateway;\n            \n            // Store or update in the gateway list\n            if (!gatewayList.includes(gateway)) {\n                gatewayList.push(gateway);\n                flow.set('gatewayList', gatewayList);\n            }\n            \n            // Update gateway stats\n            gatewayStats[gateway] = {\n                ...msg.payload,\n                lastUpdate: updateTimestamp\n            };\n        } else {\n            // Process multiple gateways\n            Object.keys(msg.payload).forEach(key => {\n                // Skip the special entries\n                if (key === 'sensorTypes' || key === 'meta') {\n                    return;\n                }\n                \n                const gateway = key;\n                const stats = msg.payload[key];\n                \n                // Add to gateway list if new\n                if (!gatewayList.includes(gateway)) {\n                    gatewayList.push(gateway);\n                }\n                \n                // Update gateway stats\n                gatewayStats[gateway] = {\n                    ...stats,\n                    lastUpdate: stats.lastUpdate || updateTimestamp\n                };\n            });\n            \n            // Store updated gateway list\n            flow.set('gatewayList', gatewayList);\n            \n            // Process global sensor types if available\n            if (msg.payload.sensorTypes) {\n                sensorTypeSummary = msg.payload.sensorTypes;\n                flow.set('sensorTypeSummary', sensorTypeSummary);\n            }\n        }\n        \n        // Store updated stats\n        flow.set('gatewayStats', gatewayStats);\n        \n        // Create aggregate stats for all gateways\n        const totalElements = Object.values(gatewayStats).reduce((sum, gateway) => sum + (gateway.elements || 0), 0);\n        const totalRecentReadings = Object.values(gatewayStats).reduce((sum, gateway) => sum + (gateway.recentReadings || 0), 0);\n        const totalDataPoints = Object.values(gatewayStats).reduce((sum, gateway) => sum + (gateway.dataPoints || 0), 0);\n        \n        // Get unique sensor types across all gateways\n        const sensorTypes = {};\n        Object.values(gatewayStats).forEach(gateway => {\n            if (gateway.sensorTypes) {\n                Object.entries(gateway.sensorTypes).forEach(([type, count]) => {\n                    if (!sensorTypes[type]) {\n                        sensorTypes[type] = 0;\n                    }\n                    sensorTypes[type] += count;\n                });\n            }\n        });\n        \n        // Build summary data for UI\n        const summary = {\n            gateways: gatewayList.length,\n            totalElements: totalElements,\n            totalReadings: totalRecentReadings,\n            totalDataPoints: totalDataPoints,\n            sensorTypeCount: Object.keys(sensorTypes).length,\n            lastUpdate: updateTimestamp\n        };\n        \n        // Build the complete UI payload\n        const uiPayload = {\n            summary: summary,\n            gateways: gatewayStats,\n            sensorTypes: sensorTypeSummary || sensorTypes,\n            gatewayList: gatewayList\n        };\n        \n        return { payload: uiPayload };\n    } catch (e) {\n        node.error(`Error processing gateway stats: ${e.message}`);\n        node.error(e.stack);\n        \n        // Return last known state if there's an error\n        return { \n            payload: {\n                summary: {\n                    gateways: gatewayList.length,\n                    lastUpdate: now,\n                    error: e.message\n                },\n                gateways: gatewayStats,\n                sensorTypes: sensorTypeSummary,\n                gatewayList: gatewayList\n            }\n        };\n    }\n} else {\n    // No valid payload, return current state\n    return { \n        payload: {\n            summary: {\n                gateways: gatewayList.length,\n                lastUpdate: now\n            },\n            gateways: gatewayStats,\n            sensorTypes: sensorTypeSummary,\n            gatewayList: gatewayList\n        }\n    };\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Initialize data structures\nflow.set('gatewayList', []);\nflow.set('gatewayStats', {});\nflow.set('sensorTypeSummary', {});\n",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 120,
        "wires": [
            [
                "dashboard-controller"
            ]
        ]
    },
    {
        "id": "dashboard-controller",
        "type": "function",
        "z": "multi-gateway-stats",
        "name": "UI Controller",
        "func": "// Route data to the appropriate UI components\nreturn [\n    { payload: msg.payload },  // Summary panel\n    { payload: msg.payload }   // Gateway details\n];\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 120,
        "wires": [
            [
                "gateway-summary"
            ],
            [
                "gateway-details"
            ]
        ]
    },
    {
        "id": "gateway-summary",
        "type": "ui_template",
        "z": "multi-gateway-stats",
        "group": "gateway_summary_group",
        "name": "Gateway Summary",
        "order": 1,
        "width": "12",
        "height": "6",
        "format": "<div ng-init=\"init()\" id=\"gateway-summary\">\n  <div class=\"summary-header\">\n    <h2>Gateway Statistics Summary</h2>\n    <span class=\"last-update\">Last Update: {{formatTime(summary.lastUpdate)}}</span>\n  </div>\n  \n  <div class=\"summary-cards\">\n    <div class=\"summary-card\">\n      <div class=\"card-value\">{{summary.gateways}}</div>\n      <div class=\"card-label\">Gateways</div>\n    </div>\n    \n    <div class=\"summary-card\">\n      <div class=\"card-value\">{{formatNumber(summary.totalElements)}}</div>\n      <div class=\"card-label\">Unique Elements</div>\n    </div>\n    \n    <div class=\"summary-card\">\n      <div class=\"card-value\">{{formatNumber(summary.totalDataPoints || summary.totalReadings)}}</div>\n      <div class=\"card-label\">Total Data Points</div>\n    </div>\n    \n    <div class=\"summary-card\">\n      <div class=\"card-value\">{{summary.sensorTypeCount}}</div>\n      <div class=\"card-label\">Sensor Types</div>\n    </div>\n  </div>\n  \n  <!-- Sensor Type Distribution -->\n  <div class=\"sensor-distribution\" ng-if=\"sensorTypes && Object.keys(sensorTypes).length > 0\">\n    <h3>Sensor Type Distribution</h3>\n    <canvas id=\"sensorDistributionChart\" height=\"200\"></canvas>\n  </div>\n</div>\n\n<style>\n#gateway-summary {\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  padding: 0 15px;\n}\n\n.summary-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n}\n\nh2 {\n  margin: 0;\n  color: #2c3e50;\n  font-weight: 400;\n}\n\nh3 {\n  color: #2c3e50;\n  font-weight: 400;\n  margin-top: 25px;\n  margin-bottom: 15px;\n}\n\n.last-update {\n  font-size: 14px;\n  color: #7f8c8d;\n}\n\n.summary-cards {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 15px;\n  margin-bottom: 25px;\n}\n\n.summary-card {\n  background: #fff;\n  border-radius: 8px;\n  padding: 20px;\n  text-align: center;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  transition: transform 0.2s, box-shadow 0.2s;\n}\n\n.summary-card:hover {\n  transform: translateY(-5px);\n  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);\n}\n\n.card-value {\n  font-size: 28px;\n  font-weight: 600;\n  color: #3498db;\n  margin-bottom: 8px;\n}\n\n.card-label {\n  font-size: 14px;\n  color: #7f8c8d;\n}\n\n.sensor-distribution {\n  background: #fff;\n  border-radius: 8px;\n  padding: 20px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  margin-top: 20px;\n}\n</style>\n\n<script>\n(function(scope) {\n  let sensorChart = null;\n  \n  scope.init = function() {\n    scope.summary = {};\n    scope.sensorTypes = {};\n    \n    scope.formatTime = function(timestamp) {\n      if (!timestamp) return 'Never';\n      const date = new Date(timestamp);\n      return date.toLocaleTimeString() + ' ' + date.toLocaleDateString();\n    };\n    \n    scope.formatNumber = function(number) {\n      if (number === undefined || number === null) return '0';\n      return number.toLocaleString();\n    };\n    \n    function updateSensorChart() {\n      if (!scope.sensorTypes || Object.keys(scope.sensorTypes).length === 0) return;\n      \n      setTimeout(() => {\n        const ctx = document.getElementById('sensorDistributionChart');\n        if (!ctx) return;\n        \n        // Get sensor type data\n        let labels = [];\n        let data = [];\n        let colors = [];\n        \n        const baseColors = [\n          '#3498db', '#e74c3c', '#2ecc71', '#f39c12', '#9b59b6',\n          '#1abc9c', '#d35400', '#34495e', '#7f8c8d', '#27ae60',\n          '#2980b9', '#c0392b', '#16a085', '#8e44ad', '#f1c40f'\n        ];\n        \n        // Create ordered list of sensor types by count\n        const sortedTypes = Object.entries(scope.sensorTypes);\n        sortedTypes.sort((a, b) => {\n          // Sort by count if available, otherwise use the raw value\n          const countA = a[1].count !== undefined ? a[1].count : a[1];\n          const countB = b[1].count !== undefined ? b[1].count : b[1];\n          return countB - countA;\n        });\n        \n        // Limit to top 10 for better visualization\n        const topTypes = sortedTypes.slice(0, 10);\n        \n        // Prepare data arrays\n        topTypes.forEach((entry, index) => {\n          const [type, value] = entry;\n          labels.push(type);\n          // Check if the value is an object with count or a direct number\n          data.push(value.count !== undefined ? value.count : value);\n          colors.push(baseColors[index % baseColors.length]);\n        });\n        \n        // Destroy previous chart if exists\n        if (sensorChart) {\n          sensorChart.destroy();\n        }\n        \n        // Create new chart\n        sensorChart = new Chart(ctx, {\n          type: 'doughnut',\n          data: {\n            labels: labels,\n            datasets: [{\n              data: data,\n              backgroundColor: colors,\n              borderColor: '#fff',\n              borderWidth: 2\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n              legend: {\n                position: 'right',\n                labels: {\n                  boxWidth: 15,\n                  padding: 15\n                }\n              },\n              tooltip: {\n                callbacks: {\n                  label: function(context) {\n                    let label = context.label || '';\n                    let value = context.raw;\n                    let percentage = Math.round((value / data.reduce((a, b) => a + b, 0)) * 100);\n                    return `${label}: ${value.toLocaleString()} (${percentage}%)`;\n                  }\n                }\n              }\n            },\n            cutout: '60%'\n          }\n        });\n      }, 100);\n    }\n    \n    scope.$watch('msg.payload', function(payload) {\n      if (!payload) return;\n      \n      scope.summary = payload.summary || {};\n      scope.sensorTypes = payload.sensorTypes || {};\n      \n      updateSensorChart();\n    });\n  };\n})(scope);\n</script>\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 880,
        "y": 80,
        "wires": [
            []
        ]
    },
    {


        "id": "gateway-details",
        "type": "ui_template",
        "z": "multi-gateway-stats",
        "group": "gateway_details_group",
        "name": "Gateway Details",
        "order": 1,
        "width": "12",
        "height": "10",
        "format": "<div ng-init=\"init()\" id=\"gateway-details\">\n  <div class=\"details-header\">\n    <h2>Gateway Details</h2>\n    <div class=\"gateway-selector\" ng-if=\"gatewayList.length > 0\">\n      <label for=\"gateway-select\">Gateway:</label>\n      <select id=\"gateway-select\" ng-model=\"selectedGateway\" ng-change=\"updateSelectedGateway()\">\n        <option value=\"\">All Gateways</option>\n        <option ng-repeat=\"gateway in gatewayList track by $index\" value=\"{{gateway}}\">\n          {{formatGatewayName(gateway)}}\n        </option>\n      </select>\n    </div>\n  </div>\n  \n  <!-- No Gateways Message -->\n  <div class=\"no-data\" ng-if=\"gatewayList.length === 0\">\n    <p>No gateway data available</p>\n  </div>\n  \n  <!-- All Gateways Overview -->\n  <div class=\"all-gateways\" ng-if=\"gatewayList.length > 0 && !selectedGateway\">\n    <div class=\"section-header\">\n      <h3>All Gateways Overview</h3>\n    </div>\n    \n    <div class=\"gateway-grid\">\n      <div class=\"gateway-card\" ng-repeat=\"gateway in gatewayList track by $index\" ng-click=\"selectGateway(gateway)\">\n        <div class=\"gateway-header\">\n          <h4>{{formatGatewayName(gateway)}}</h4>\n          <span class=\"last-seen\">Last seen: {{formatTime(gateways[gateway].lastUpdate)}}</span>\n        </div>\n        <div class=\"gateway-stats\">\n          <div class=\"stat-item\">\n            <span class=\"stat-value\">{{gateways[gateway].elements || 0}}</span>\n            <span class=\"stat-label\">Unique Elements</span>\n          </div>\n          <div class=\"stat-item\">\n            <span class=\"stat-value\">{{gateways[gateway].dataPoints || gateways[gateway].recentReadings || 0}}</span>\n            <span class=\"stat-label\">Data Points</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  \n  <!-- Selected Gateway Details -->\n  <div class=\"selected-gateway\" ng-if=\"selectedGateway && gateways[selectedGateway]\">\n    <div class=\"gateway-details-header\">\n      <div class=\"gateway-title\">\n        <h3>{{formatGatewayName(selectedGateway)}}</h3>\n        <span class=\"gateway-id\">ID: {{selectedGateway}}</span>\n      </div>\n      <span class=\"last-update\">Last Update: {{formatTime(gateways[selectedGateway].lastUpdate)}}</span>\n    </div>\n    \n    <div class=\"stats-section\">\n      <div class=\"section-header\">\n        <h4>Statistics</h4>\n      </div>\n      \n      <div class=\"stats-grid\">\n        <div class=\"stat-box\">\n          <div class=\"stat-value\">{{gateways[selectedGateway].elements || 0}}</div>\n          <div class=\"stat-label\">Unique Elements</div>\n        </div>\n        \n        <div class=\"stat-box\">\n          <div class=\"stat-value\">{{gateways[selectedGateway].dataPoints || gateways[selectedGateway].recentReadings || 0}}</div>\n          <div class=\"stat-label\">Total Data Points</div>\n          <div class=\"stat-description\">Each data point is an entry in pubsub_message.data array</div>\n        </div>\n        \n        <div class=\"stat-box\">\n          <div class=\"stat-value\">{{getUniqueCount(selectedGateway, 'mac_address')}}</div>\n          <div class=\"stat-label\">Unique MAC Addresses</div>\n        </div>\n        \n        <div class=\"stat-box\">\n          <div class=\"stat-value\">{{getSensorTypeCount(selectedGateway)}}</div>\n          <div class=\"stat-label\">Sensor Types</div>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Sensor Types Section -->\n    <div class=\"sensor-types-section\" ng-if=\"gateways[selectedGateway].sensorTypes && Object.keys(gateways[selectedGateway].sensorTypes).length > 0\">\n      <div class=\"section-header\">\n        <h4>Sensor Types</h4>\n      </div>\n      \n      <div class=\"sensor-chart-container\">\n        <canvas id=\"gatewayPieChart\" height=\"260\"></canvas>\n      </div>\n      \n      <div class=\"sensor-type-list\">\n        <div class=\"sensor-type-item\" ng-repeat=\"(type, count) in gateways[selectedGateway].sensorTypes\">\n          <div class=\"sensor-type-name\">{{type}}</div>\n          <div class=\"sensor-type-count\">{{count}} data points</div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<style>\n#gateway-details {\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  padding: 0 15px;\n}\n\n.details-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 20px;\n}\n\n.gateway-selector {\n  display: flex;\n  align-items: center;\n}\n\n.gateway-selector label {\n  margin-right: 10px;\n  font-weight: 500;\n}\n\n.gateway-selector select {\n  padding: 8px 12px;\n  border-radius: 4px;\n  border: 1px solid #ddd;\n  font-size: 14px;\n  min-width: 200px;\n}\n\nh2, h3, h4 {\n  margin: 0;\n  color: #2c3e50;\n  font-weight: 400;\n}\n\nh2 {\n  font-size: 24px;\n}\n\nh3 {\n  font-size: 20px;\n}\n\nh4 {\n  font-size: 18px;\n}\n\n.section-header {\n  margin-bottom: 15px;\n  border-bottom: 1px solid #eee;\n  padding-bottom: 8px;\n}\n\n.no-data {\n  background: #f9f9f9;\n  border-radius: 8px;\n  padding: 40px 20px;\n  text-align: center;\n  color: #7f8c8d;\n  font-style: italic;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);\n}\n\n/* All Gateways Grid */\n.gateway-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 20px;\n  margin-bottom: 30px;\n}\n\n.gateway-card {\n  background: #fff;\n  border-radius: 8px;\n  padding: 15px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  cursor: pointer;\n  transition: transform 0.2s, box-shadow 0.2s;\n}\n\n.gateway-card:hover {\n  transform: translateY(-5px);\n  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);\n}\n\n.gateway-header {\n  margin-bottom: 15px;\n  border-bottom: 1px solid #eee;\n  padding-bottom: 10px;\n}\n\n.gateway-header h4 {\n  margin-bottom: 5px;\n  color: #3498db;\n}\n\n.last-seen {\n  font-size: 12px;\n  color: #7f8c8d;\n}\n\n.gateway-stats {\n  display: flex;\n  justify-content: space-between;\n}\n\n.stat-item {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 10px;\n  flex: 1;\n}\n\n.stat-value {\n  font-size: 20px;\n  font-weight: 600;\n  color: #2c3e50;\n}\n\n.stat-label {\n  font-size: 12px;\n  color: #7f8c8d;\n  margin-top: 5px;\n}\n\n.stat-description {\n  font-size: 10px;\n  color: #95a5a6;\n  font-style: italic;\n  margin-top: 5px;\n  line-height: 1.3;\n}\n\n/* Selected Gateway Details */\n.gateway-details-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  margin-bottom: 20px;\n}\n\n.gateway-title {\n  display: flex;\n  flex-direction: column;\n}\n\n.gateway-id {\n  font-size: 12px;\n  color: #7f8c8d;\n  margin-top: 5px;\n}\n\n.last-update {\n  font-size: 14px;\n  color: #7f8c8d;\n}\n\n.stats-section, .sensor-types-section {\n  background: #fff;\n  border-radius: 8px;\n  padding: 20px;\n  margin-bottom: 25px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n}\n\n.stats-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 15px;\n}\n\n.stat-box {\n  text-align: center;\n  padding: 15px;\n  background: #f8f9fa;\n  border-radius: 6px;\n}\n\n.stat-box .stat-value {\n  font-size: 24px;\n  color: #3498db;\n  margin-bottom: 8px;\n}\n\n.sensor-chart-container {\n  margin-bottom: 20px;\n  height: 260px;\n}\n\n.sensor-type-list {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  gap: 10px;\n}\n\n.sensor-type-item {\n  background: #f8f9fa;\n  border-radius: 6px;\n  padding: 10px 15px;\n}\n\n.sensor-type-name {\n  font-weight: 600;\n  color: #2c3e50;\n  margin-bottom: 5px;\n}\n\n.sensor-type-count {\n  font-size: 14px;\n  color: #7f8c8d;\n}\n\n@media (max-width: 768px) {\n  .details-header {\n    flex-direction: column;\n    align-items: flex-start;\n  }\n  \n  .gateway-selector {\n    margin-top: 15px;\n    width: 100%;\n  }\n  \n  .gateway-selector select {\n    width: 100%;\n  }\n  \n  .gateway-details-header {\n    flex-direction: column;\n  }\n  \n  .last-update {\n    margin-top: 10px;\n  }\n}\n</style>\n\n<script>\n(function(scope) {\n  let pieChart = null;\n  \n  scope.init = function() {\n    scope.gatewayList = [];\n    scope.gateways = {};\n    scope.selectedGateway = '';\n    \n    scope.formatTime = function(timestamp) {\n      if (!timestamp) return 'Never';\n      const date = new Date(timestamp);\n      return date.toLocaleTimeString() + ' ' + date.toLocaleDateString();\n    };\n    \n    scope.formatGatewayName = function(gateway) {\n      if (!gateway) return 'Unknown';\n      \n      // For long gateway IDs, truncate for display\n      if (gateway.length > 20) {\n        return gateway.substring(0, 8) + '...' + gateway.substring(gateway.length - 8);\n      }\n      return gateway;\n    };\n    \n    scope.selectGateway = function(gateway) {\n      scope.selectedGateway = gateway;\n      updateGatewayChart();\n    };\n    \n    scope.updateSelectedGateway = function() {\n      updateGatewayChart();\n    };\n    \n    scope.getSensorTypeCount = function(gateway) {\n      if (!scope.gateways[gateway] || !scope.gateways[gateway].sensorTypes) {\n        return 0;\n      }\n      return Object.keys(scope.gateways[gateway].sensorTypes).length;\n    };\n    \n    scope.getUniqueCount = function(gateway, field) {\n      if (!scope.gateways[gateway] || !scope.gateways[gateway].uniqueFields) {\n        return 0;\n      }\n      return scope.gateways[gateway].uniqueFields[field] || 0;\n    };\n    \n    function updateGatewayChart() {\n      if (!scope.selectedGateway || !scope.gateways[scope.selectedGateway]) return;\n      \n      const gateway = scope.gateways[scope.selectedGateway];\n      if (!gateway.sensorTypes || Object.keys(gateway.sensorTypes).length === 0) return;\n      \n      setTimeout(() => {\n        const ctx = document.getElementById('gatewayPieChart');\n        if (!ctx) return;\n        \n        // Prepare chart data\n        const labels = Object.keys(gateway.sensorTypes);\n        const data = labels.map(key => gateway.sensorTypes[key]);\n        \n        // Generate colors\n        const baseColors = [\n          '#3498db', '#e74c3c', '#2ecc71', '#f39c12', '#9b59b6',\n          '#1abc9c', '#d35400', '#34495e', '#7f8c8d', '#27ae60'\n        ];\n        \n        const colors = labels.map((_, i) => baseColors[i % baseColors.length]);\n        \n        // Destroy previous chart if exists\n        if (pieChart) {\n          pieChart.destroy();\n        }\n        \n        // Create new pie chart\n        pieChart = new Chart(ctx, {\n          type: 'pie',\n          data: {\n            labels: labels,\n            datasets: [{\n              data: data,\n              backgroundColor: colors,\n              borderColor: '#fff',\n              borderWidth: 2\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n              legend: {\n                position: 'bottom',\n                labels: {\n                  boxWidth: 15,\n                  padding: 15\n                }\n              },\n              tooltip: {\n                callbacks: {\n                  label: function(context) {\n                    let label = context.label || '';\n                    let value = context.raw;\n                    let percentage = Math.round((value / data.reduce((a, b) => a + b, 0)) * 100);\n                    return `${label}: ${value} (${percentage}%)`;\n                  }\n                }\n              }\n            }\n          }\n        });\n      }, 100);\n    }\n    \n    scope.$watch('msg.payload', function(payload) {\n      if (!payload) return;\n      \n      scope.gatewayList = payload.gatewayList || [];\n      scope.gateways = payload.gateways || {};\n      \n      // If we have a new gateway list but no selection, select the first gateway\n      if (scope.gatewayList.length > 0 && !scope.selectedGateway) {\n        scope.selectedGateway = scope.gatewayList[0];\n      }\n      \n      // If the selected gateway no longer exists, clear selection\n      if (scope.selectedGateway && (!scope.gateways[scope.selectedGateway])) {\n        if (scope.gatewayList.length > 0) {\n          scope.selectedGateway = scope.gatewayList[0];\n        } else {\n          scope.selectedGateway = '';\n        }\n      }\n      \n      // Update chart for selected gateway\n      updateGatewayChart();\n    });\n  };\n})(scope);\n</script>\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 880,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "stats-refresh-trigger",
        "type": "inject",
        "z": "multi-gateway-stats",
        "name": "Auto Refresh (1 min)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 200,
        "wires": [
            [
                "process-gateway-stats"
            ]
        ]
    },
    {
        "id": "gateway_summary_group",
        "type": "ui_group",
        "name": "Gateway Summary",
        "tab": "gateway_stats_tab",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "gateway_details_group",
        "type": "ui_group",
        "name": "Gateway Details",
        "tab": "gateway_stats_tab",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "gateway_stats_tab",
        "type": "ui_tab",
        "name": "Gateway Statistics",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]
