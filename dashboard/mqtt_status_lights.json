[
    {
        "id": "mqtt-status-dashboard",
        "type": "tab",
        "label": "Device Status Dashboard",
        "disabled": false,
        "info": "Dashboard showing device status lights based on MQTT messages"
    },
    {
        "id": "mqtt-status-in",
        "type": "mqtt in",
        "z": "mqtt-status-dashboard",
        "name": "Device Status",
        "topic": "status/+/alive",
        "qos": "2",
        "datatype": "auto",
        "broker": "",
        "nl": false,
        "rap": true,
        "rh": 0,
        "x": 160,
        "y": 120,
        "wires": [
            [
                "mqtt-status-process"
            ]
        ]
    },
    {
        "id": "mqtt-status-process",
        "type": "function",
        "z": "mqtt-status-dashboard",
        "name": "Process Device Status",
        "func": "// Extract device name from the topic\nconst topicParts = msg.topic.split('/');\nconst deviceName = topicParts[1];\n\n// Set up the payload for the UI element\nlet status = false;\n\n// Check if there's any message (presence indicates alive)\nif (msg.payload !== undefined && msg.payload !== null) {\n    // If the message is '0', '0', false, etc., mark as offline\n    if (msg.payload === 0 || msg.payload === '0' || msg.payload === 'false' || msg.payload === false) {\n        status = false;\n    } else {\n        // Otherwise, mark as online\n        status = true;\n    }\n}\n\n// Create an output message for the dashboard element\nreturn {\n    topic: deviceName,\n    payload: status,\n    deviceName: deviceName,  // Add device name for the dashboard UI\n    timestamp: Date.now()    // Add timestamp for timeout checking\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 120,
        "wires": [
            [
                "mqtt-status-ui-controller"
            ]
        ]
    },
    {
        "id": "mqtt-status-ui-controller",
        "type": "function",
        "z": "mqtt-status-dashboard",
        "name": "UI Controller",
        "func": "// Get the dynamic device name\nconst deviceName = msg.deviceName;\n\n// Get current device statuses from flow context\nlet deviceStatuses = flow.get('deviceStatuses') || {};\nlet deviceTimestamps = flow.get('deviceTimestamps') || {};\n\n// Update the status for this device\ndeviceStatuses[deviceName] = msg.payload;\n\n// Store the timestamp for timeout checking\ndeviceTimestamps[deviceName] = msg.timestamp;\n\n// Save updated device data\nflow.set('deviceStatuses', deviceStatuses);\nflow.set('deviceTimestamps', deviceTimestamps);\n\n// Create a message with all device statuses\nreturn { payload: deviceStatuses };\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Initialize the device tracking\nflow.set('deviceStatuses', {});\nflow.set('deviceTimestamps', {});\n",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 120,
        "wires": [
            [
                "mqtt-status-ui-template"
            ]
        ]
    },
    {
        "id": "mqtt-status-ui-template",
        "type": "ui_template",
        "z": "mqtt-status-dashboard",
        "group": "device_status_group",
        "name": "Dynamic Status Panel",
        "order": 0,
        "width": "12",
        "height": "20",
        "format": "<div ng-init=\"init()\" id=\"device-status-panel\">\n  <h2>Device Status</h2>\n  <div class=\"device-list\">\n    <div class=\"device-status\" ng-repeat=\"(deviceName, isOnline) in deviceStatuses\">\n      <div class=\"status-light\" ng-class=\"{'online': isOnline, 'offline': !isOnline}\"></div>\n      <div class=\"device-name\">{{deviceName}}</div>\n    </div>\n  </div>\n  \n  <div class=\"large-status-container\">\n    <div class=\"large-status\" ng-repeat=\"(deviceName, isOnline) in deviceStatuses\" ng-if=\"isOnline\">\n      <div class=\"large-status-light online\"></div>\n      <div class=\"large-device-name\">{{deviceName}}</div>\n    </div>\n  </div>\n</div>\n\n<style>\n  #device-status-panel {\n    padding: 20px;\n    font-family: Arial, sans-serif;\n    height: auto;\n    overflow: visible;\n  }\n  \n  h2 {\n    margin-top: 0;\n    margin-bottom: 20px;\n    font-size: 28px;\n  }\n  \n  .device-list {\n    display: flex;\n    flex-direction: column;\n    gap: 15px;\n    margin-bottom: 30px;\n    border-bottom: 1px solid #ccc;\n    padding-bottom: 25px;\n  }\n  \n  .device-status {\n    display: flex;\n    align-items: center;\n    gap: 15px;\n  }\n  \n  .status-light {\n    width: 22px;\n    height: 22px;\n    border-radius: 50%;\n    box-shadow: 0 0 5px rgba(0,0,0,0.3);\n  }\n  \n  .large-status-container {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-around;\n    gap: 30px;\n    padding: 10px;\n  }\n  \n  .large-status {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    margin: 20px 0;\n  }\n  \n  .large-status-light {\n    width: 120px;\n    height: 120px;\n    border-radius: 50%;\n    margin-bottom: 15px;\n  }\n  \n  .online {\n    background-color: #00ff00;\n    box-shadow: 0 0 20px #00ff00;\n  }\n  \n  .offline {\n    background-color: #ff0000;\n  }\n  \n  .device-name {\n    font-weight: bold;\n    font-size: 16px;\n  }\n  \n  .large-device-name {\n    font-size: 22px;\n    font-weight: bold;\n  }\n</style>\n\n<script>\n(function(scope) {\n  scope.init = function() {\n    scope.deviceStatuses = {};\n    \n    scope.$watch('msg.payload', function(payload) {\n      if (!payload) return;\n      \n      // Update all device statuses\n      scope.deviceStatuses = payload;\n    });\n  };\n})(scope);\n</script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 860,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "device-timeout-check",
        "type": "inject",
        "z": "mqtt-status-dashboard",
        "name": "Check Device Timeouts (Every 5 min)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": "10",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 200,
        "wires": [
            [
                "device-timeout-processor"
            ]
        ]
    },
    {
        "id": "device-timeout-processor",
        "type": "function",
        "z": "mqtt-status-dashboard",
        "name": "Process Timeouts",
        "func": "// Get the current stored data\nlet deviceStatuses = flow.get('deviceStatuses') || {};\nlet deviceTimestamps = flow.get('deviceTimestamps') || {};\n\n// Current time\nconst now = Date.now();\n\n// One hour in milliseconds\nconst oneHour = 60 * 60 * 1000;\n\n// Check each device\nlet updated = false;\n\nObject.keys(deviceTimestamps).forEach(deviceName => {\n    const lastSeen = deviceTimestamps[deviceName];\n    \n    // If device has been inactive for more than an hour, mark it offline\n    if (now - lastSeen > oneHour && deviceStatuses[deviceName] === true) {\n        deviceStatuses[deviceName] = false;\n        updated = true;\n        node.log(`Device ${deviceName} marked offline due to inactivity`);\n    }\n});\n\n// Save updated statuses\nflow.set('deviceStatuses', deviceStatuses);\n\n// Only send update if something changed\nif (updated) {\n    return { payload: deviceStatuses };\n}\n\nreturn null;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 200,
        "wires": [
            [
                "mqtt-status-ui-template"
            ]
        ]
    },
    {
        "id": "device_status_group",
        "type": "ui_group",
        "name": "Device Status",
        "tab": "device_status_tab",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "device_status_tab",
        "type": "ui_tab",
        "name": "Device Status Dashboard",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]
