[
    {
        "id": "08108b0729062eae",
        "type": "ui_template",
        "z": "5b8625b7fcd2c6db",
        "group": "01144bf6140e519a",
        "name": "Gateway Summary",
        "order": 1,
        "width": "12",
        "height": "6",
        "format": "<div ng-init=\"init()\" id=\"gateway-summary\">\n  <div class=\"summary-header\">\n    <h2>Gateway Statistics Summary</h2>\n    <div class=\"date-controls\">\n      <div class=\"date-selector\" ng-if=\"dateList.length > 0\">\n        <label for=\"summary-date-select\">Collection Date:</label>\n        <select id=\"summary-date-select\" ng-model=\"selectedDate\" ng-change=\"updateSelectedDate()\">\n          <option ng-repeat=\"date in dateList track by $index\" value=\"{{date}}\">\n            {{formatDate(date)}}\n          </option>\n        </select>\n      </div>\n    </div>\n    <div class=\"date-info\">\n      <span class=\"collection-date\">Collection Date: {{formatDate(summary.collectionDate || 'current')}}</span>\n      <span class=\"last-update\">Last Update: {{formatTime(summary.lastUpdate)}}</span>\n    </div>\n  </div>\n  \n  <div class=\"summary-cards\">\n    <div class=\"summary-card\">\n      <div class=\"card-value\">{{summary.gateways}}</div>\n      <div class=\"card-label\">Gateways</div>\n    </div>\n    \n    <div class=\"summary-card\">\n      <div class=\"card-value\">{{formatNumber(summary.totalElements)}}</div>\n      <div class=\"card-label\">Unique Elements</div>\n    </div>\n    \n    <div class=\"summary-card\">\n      <div class=\"card-value\">{{formatNumber(summary.totalDataPoints || summary.totalReadings)}}</div>\n      <div class=\"card-label\">Total Data Points</div>\n    </div>\n    \n    <div class=\"summary-card\">\n      <div class=\"card-value\">{{summary.sensorTypeCount}}</div>\n      <div class=\"card-label\">Sensor Types</div>\n    </div>\n  </div>\n  \n  <!-- Sensor Type Distribution -->\n  <div class=\"sensor-distribution\" ng-if=\"sensorTypes && Object.keys(sensorTypes).length > 0\">\n    <h3>Sensor Type Distribution</h3>\n    <canvas id=\"sensorDistributionChart\" height=\"200\"></canvas>\n  </div>\n</div>\n\n<style>\n#gateway-summary {\n  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  padding: 0 15px;\n}\n\n.summary-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: flex-start;\n  margin-bottom: 20px;\n  flex-wrap: wrap;\n}\n\n.date-controls {\n  display: flex;\n  flex-direction: column;\n  margin-top: 5px;\n}\n\n.date-selector {\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n}\n\n.date-selector label {\n  margin-right: 10px;\n  font-weight: 500;\n  white-space: nowrap;\n}\n\n.date-selector select {\n  padding: 8px 12px;\n  border-radius: 4px;\n  border: 1px solid #ddd;\n  font-size: 14px;\n  min-width: 150px;\n}\n\n.date-info {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  gap: 5px;\n}\n\n.collection-date, .last-update {\n  font-size: 14px;\n  color: #7f8c8d;\n}\n\nh2 {\n  margin: 0;\n  color: #2c3e50;\n  font-weight: 400;\n}\n\nh3 {\n  color: #2c3e50;\n  font-weight: 400;\n  margin-top: 25px;\n  margin-bottom: 15px;\n}\n\n.summary-cards {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n  gap: 15px;\n  margin-bottom: 25px;\n}\n\n.summary-card {\n  background: #fff;\n  border-radius: 8px;\n  padding: 20px;\n  text-align: center;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  transition: transform 0.2s, box-shadow 0.2s;\n}\n\n.summary-card:hover {\n  transform: translateY(-5px);\n  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);\n}\n\n.card-value {\n  font-size: 28px;\n  font-weight: 600;\n  color: #3498db;\n  margin-bottom: 8px;\n}\n\n.card-label {\n  font-size: 14px;\n  color: #7f8c8d;\n}\n\n.sensor-distribution {\n  background: #fff;\n  border-radius: 8px;\n  padding: 20px;\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  margin-top: 20px;\n}\n\n@media (max-width: 768px) {\n  .summary-header {\n    flex-direction: column;\n    align-items: flex-start;\n  }\n  \n  .date-controls {\n    width: 100%;\n    margin-bottom: 10px;\n  }\n  \n  .date-selector {\n    width: 100%;\n  }\n  \n  .date-selector select {\n    width: 100%;\n  }\n  \n  .date-info {\n    align-items: flex-start;\n    margin-top: 10px;\n  }\n}\n</style>\n\n<script>\n(function(scope) {\n  let sensorChart = null;\n  \n  scope.init = function() {\n    scope.summary = {};\n    scope.sensorTypes = {};\n    scope.dateList = ['current'];\n    scope.selectedDate = 'current';\n    scope.dateBasedStats = {};\n    \n    scope.formatTime = function(timestamp) {\n      if (!timestamp) return 'Never';\n      const date = new Date(timestamp);\n      return date.toLocaleTimeString() + ' ' + date.toLocaleDateString();\n    };\n    \n    scope.formatDate = function(dateStr) {\n      if (!dateStr) return 'Unknown';\n      if (dateStr === 'current') return 'Current';\n      \n      try {\n        const date = new Date(dateStr);\n        return date.toLocaleDateString();\n      } catch (e) {\n        return dateStr;\n      }\n    };\n    \n    scope.formatNumber = function(number) {\n      if (number === undefined || number === null) return '0';\n      return number.toLocaleString();\n    };\n    \n    scope.updateSelectedDate = function() {\n      if (!scope.dateBasedStats || !scope.selectedDate) return;\n      \n      // If we have data for this date, update the displayed summary and sensor types\n      if (scope.dateBasedStats[scope.selectedDate]) {\n        const dateStats = scope.dateBasedStats[scope.selectedDate];\n        \n        // Update summary with data for the selected date\n        if (dateStats.summary) {\n          scope.summary = dateStats.summary;\n        }\n        \n        // Update sensor types with data for the selected date\n        if (dateStats.sensorTypes) {\n          scope.sensorTypes = dateStats.sensorTypes;\n          updateSensorChart();\n        }\n      }\n    };\n    \n    function updateSensorChart() {\n      if (!scope.sensorTypes || Object.keys(scope.sensorTypes).length === 0) return;\n      \n      setTimeout(() => {\n        const ctx = document.getElementById('sensorDistributionChart');\n        if (!ctx) return;\n        \n        // Get sensor type data\n        let labels = [];\n        let data = [];\n        let colors = [];\n        \n        const baseColors = [\n          '#3498db', '#e74c3c', '#2ecc71', '#f39c12', '#9b59b6',\n          '#1abc9c', '#d35400', '#34495e', '#7f8c8d', '#27ae60',\n          '#2980b9', '#c0392b', '#16a085', '#8e44ad', '#f1c40f'\n        ];\n        \n        // Create ordered list of sensor types by count\n        const sortedTypes = Object.entries(scope.sensorTypes);\n        sortedTypes.sort((a, b) => {\n          // Sort by count if available, otherwise use the raw value\n          const countA = a[1].count !== undefined ? a[1].count : a[1];\n          const countB = b[1].count !== undefined ? b[1].count : b[1];\n          return countB - countA;\n        });\n        \n        // Limit to top 10 for better visualization\n        const topTypes = sortedTypes.slice(0, 10);\n        \n        // Prepare data arrays\n        topTypes.forEach((entry, index) => {\n          const [type, value] = entry;\n          labels.push(type);\n          // Check if the value is an object with count or a direct number\n          data.push(value.count !== undefined ? value.count : value);\n          colors.push(baseColors[index % baseColors.length]);\n        });\n        \n        // Destroy previous chart if exists\n        if (sensorChart) {\n          sensorChart.destroy();\n        }\n        \n        // Create new chart\n        sensorChart = new Chart(ctx, {\n          type: 'doughnut',\n          data: {\n            labels: labels,\n            datasets: [{\n              data: data,\n              backgroundColor: colors,\n              borderColor: '#fff',\n              borderWidth: 2\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n              legend: {\n                position: 'right',\n                labels: {\n                  boxWidth: 15,\n                  padding: 15\n                }\n              },\n              tooltip: {\n                callbacks: {\n                  label: function(context) {\n                    let label = context.label || '';\n                    let value = context.raw;\n                    let percentage = Math.round((value / data.reduce((a, b) => a + b, 0)) * 100);\n                    return `${label}: ${value.toLocaleString()} (${percentage}%)`;\n                  }\n                }\n              }\n            },\n            cutout: '60%'\n          }\n        });\n      }, 100);\n    }\n    \n    scope.$watch('msg.payload', function(payload) {\n      if (!payload) return;\n      \n      // Update date list and date-based stats\n      if (payload.dateList) {\n        scope.dateList = payload.dateList;\n      }\n      \n      if (payload.dateBasedStats) {\n        scope.dateBasedStats = payload.dateBasedStats;\n      }\n      \n      // Update selected date if provided in the payload\n      if (payload.selectedDate && scope.dateList.includes(payload.selectedDate)) {\n        scope.selectedDate = payload.selectedDate;\n      }\n      \n      // Update main summary and sensor type data from the payload\n      scope.summary = payload.summary || {};\n      scope.sensorTypes = payload.sensorTypes || {};\n      \n      // Update the chart with new data\n      updateSensorChart();\n    });\n  };\n})(scope);\n</script>\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 1050,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "01144bf6140e519a",
        "type": "ui_group",
        "name": "Gateway Summary",
        "tab": "gateway_stats_tab",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "gateway_stats_tab",
        "type": "ui_tab",
        "name": "Gateway Statistics",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    }
]