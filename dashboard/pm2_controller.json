[
    {
        "id": "pm2_controls_group",
        "type": "ui_group",
        "name": "PM2 Service Controls",
        "tab": "device_status_tab",
        "order": 3,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "pm2-service-0-toggle",
        "type": "ui_switch",
        "z": "mqtt-status-dashboard",
        "name": "PM2 Service 0",
        "label": "Service 0",
        "tooltip": "Toggle PM2 Service 0",
        "group": "pm2_controls_group",
        "order": 1,
        "width": 4,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "pm2/service/0",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "x": 170,
        "y": 420,
        "wires": [
            [
                "pm2-service-0-handler"
            ]
        ]
    },
    {
        "id": "pm2-service-1-toggle",
        "type": "ui_switch",
        "z": "mqtt-status-dashboard",
        "name": "PM2 Service 1",
        "label": "Service 1",
        "tooltip": "Toggle PM2 Service 1",
        "group": "pm2_controls_group",
        "order": 2,
        "width": 4,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "pm2/service/1",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "x": 170,
        "y": 480,
        "wires": [
            [
                "pm2-service-1-handler"
            ]
        ]
    },
    {
        "id": "pm2-service-6-toggle",
        "type": "ui_switch",
        "z": "mqtt-status-dashboard",
        "name": "PM2 Service 6",
        "label": "Service 6",
        "tooltip": "Toggle PM2 Service 6",
        "group": "pm2_controls_group",
        "order": 3,
        "width": 4,
        "height": 1,
        "passthru": true,
        "decouple": "false",
        "topic": "pm2/service/6",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "x": 170,
        "y": 540,
        "wires": [
            [
                "pm2-service-6-handler"
            ]
        ]
    },
    {
        "id": "pm2-service-0-handler",
        "type": "function",
        "z": "mqtt-status-dashboard",
        "name": "PM2 Service 0 Control",
        "func": "// Determine which command to execute based on toggle state\nconst serviceId = 0;\nconst isOn = msg.payload === true;\n\nmsg.serviceId = serviceId;\nmsg.command = isOn ? 'start' : 'stop';\n\n// Set the payload to the command to execute\nmsg.payload = `pm2 ${msg.command} ${serviceId}`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 420,
        "wires": [
            [
                "pm2-command-exec"
            ]
        ]
    },
    {
        "id": "pm2-service-1-handler",
        "type": "function",
        "z": "mqtt-status-dashboard",
        "name": "PM2 Service 1 Control",
        "func": "// Determine which command to execute based on toggle state\nconst serviceId = 1;\nconst isOn = msg.payload === true;\n\nmsg.serviceId = serviceId;\nmsg.command = isOn ? 'start' : 'stop';\n\n// Set the payload to the command to execute\nmsg.payload = `pm2 ${msg.command} ${serviceId}`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 480,
        "wires": [
            [
                "pm2-command-exec"
            ]
        ]
    },
    {
        "id": "pm2-service-6-handler",
        "type": "function",
        "z": "mqtt-status-dashboard",
        "name": "PM2 Service 6 Control",
        "func": "// Determine which command to execute based on toggle state\nconst serviceId = 6;\nconst isOn = msg.payload === true;\n\nmsg.serviceId = serviceId;\nmsg.command = isOn ? 'start' : 'stop';\n\n// Set the payload to the command to execute\nmsg.payload = `pm2 ${msg.command} ${serviceId}`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 540,
        "wires": [
            [
                "pm2-command-exec"
            ]
        ]
    },
    {
        "id": "pm2-command-exec",
        "type": "exec",
        "z": "mqtt-status-dashboard",
        "command": "",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Execute PM2 Command",
        "x": 660,
        "y": 480,
        "wires": [
            [
                "pm2-command-response"
            ],
            [],
            []
        ]
    },
    {
        "id": "pm2-command-response",
        "type": "function",
        "z": "mqtt-status-dashboard",
        "name": "Log PM2 Response",
        "func": "// Extract the service info from the message\nconst serviceId = msg.serviceId;\nconst command = msg.command;\n\n// Log the PM2 command result\nnode.log(`PM2 service ${serviceId} ${command} command executed`);\n\n// Return a status message that can be displayed\nreturn {\n    topic: `pm2/service/${serviceId}/status`,\n    payload: `Service ${serviceId} ${command} command completed`,\n    serviceId: serviceId,\n    command: command\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 480,
        "wires": [
            [
                "pm2-status-display"
            ]
        ]
    },
    {
        "id": "pm2-status-display",
        "type": "ui_text",
        "z": "mqtt-status-dashboard",
        "group": "pm2_controls_group",
        "order": 4,
        "width": 12,
        "height": 1,
        "name": "PM2 Status",
        "label": "Last Command Status",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1110,
        "y": 480,
        "wires": []
    },
    {
        "id": "pm2-status-init",
        "type": "inject",
        "z": "mqtt-status-dashboard",
        "name": "Initialize PM2 Status on Deploy",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "0.1",
        "topic": "",
        "payload": "Ready to control PM2 services",
        "payloadType": "str",
        "x": 830,
        "y": 420,
        "wires": [
            [
                "pm2-status-display"
            ]
        ]
    },
    {
        "id": "pm2-monitor-trigger",
        "type": "inject",
        "z": "mqtt-status-dashboard",
        "name": "Check PM2 Status (Every minute)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "60",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 600,
        "wires": [
            [
                "pm2-check-status"
            ]
        ]
    },
    {
        "id": "pm2-check-status",
        "type": "exec",
        "z": "mqtt-status-dashboard",
        "command": "pm2 jlist",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Get PM2 Status",
        "x": 440,
        "y": 600,
        "wires": [
            [
                "pm2-status-parser"
            ],
            [],
            []
        ]
    },
    {
        "id": "pm2-status-parser",
        "type": "function",
        "z": "mqtt-status-dashboard",
        "name": "Parse PM2 Status",
        "func": "// Parse the PM2 JSON list output\nlet pmData;\ntry {\n    pmData = JSON.parse(msg.payload);\n} catch (e) {\n    node.error('Failed to parse PM2 status output');\n    return null;\n}\n\n// Find services 0, 1, and 6\nconst targetIds = [0, 1, 6];\nconst serviceStatuses = {};\n\n// Process each PM2 service\nfor (const process of pmData) {\n    const pm_id = process.pm_id;\n    \n    // Check if this is one of our target services\n    if (targetIds.includes(pm_id)) {\n        // Get the online status (true if running, false otherwise)\n        const isRunning = process.pm2_env.status === 'online';\n        \n        // Create a message for each service switch\n        const serviceMsg = {\n            topic: `pm2/service/${pm_id}`,\n            payload: isRunning,\n            pm_id: pm_id\n        };\n        \n        // Store the service status\n        serviceStatuses[pm_id] = serviceMsg;\n    }\n}\n\n// Create an array of messages to send (one for each service)\nconst messages = Object.values(serviceStatuses);\n\n// Return all messages\nreturn [messages];\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 600,
        "wires": [
            [
                "pm2-update-switches"
            ]
        ]
    },
    {
        "id": "pm2-update-switches",
        "type": "switch",
        "z": "mqtt-status-dashboard",
        "name": "Route to Correct Switch",
        "property": "pm_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "6",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 870,
        "y": 600,
        "wires": [
            [
                "pm2-service-0-toggle"
            ],
            [
                "pm2-service-1-toggle"
            ],
            [
                "pm2-service-6-toggle"
            ]
        ]
    }
]
