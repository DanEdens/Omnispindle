[
    {
        "id": "78d9d20b8ba62fc8",
        "type": "function",
        "z": "0869aabc883a8824",
        "name": "set-aggregate-parameters",
        "func": "// Get Pending Todos Pipeline\nconst pendingTodosPipeline = [\n    // Match pending todos\n    { $match: { status: \"pending\" } },\n\n    // Sort by priority (asc) and created date (asc)\n    { $sort: { priority: 1, created_at: 1 } }\n\n    // Could add limit stage here if needed\n];\n\n// Get Completed Todos Pipeline\nconst completedTodosPipeline = [\n    // Match completed todos\n    { $match: { status: \"completed\" } },\n\n    // Sort by completed date (desc)\n    { $sort: { completed_at: -1 } },\n\n    // Limit to last 50\n    { $limit: 50 }\n];\n\n// Schedule Pipeline - for generating daily schedule data\nconst schedulePipeline = [\n    // Get only pending todos for scheduling\n    { $match: { status: \"pending\" } },\n\n    // Sort todos by priority first (high priority first)\n    // The sort order is opposite from pending todos list because we want high priority first\n    {\n        $sort: {\n            // Convert priority to numeric value for sorting\n            // high: 1, medium/initial: 2, low: 3\n            $cond: [\n                { $eq: [\"$priority\", \"high\"] },\n                1,\n                {\n                    $cond: [\n                        {\n                            $or: [\n                                { $eq: [\"$priority\", \"medium\"] },\n                                { $eq: [\"$priority\", \"initial\"] }\n                            ]\n                        },\n                        2,\n                        3\n                    ]\n                }\n            ],\n            // Then by creation date (newer first)\n            created_at: -1\n        }\n    },\n\n    // Limit to a reasonable number of tasks per day\n    { $limit: 8 },\n\n    // Project to add scheduling metadata\n    {\n        $project: {\n            _id: 0,\n            todo_id: \"$id\",\n            description: 1,\n            priority: 1,\n            status: 1,\n            created_at: 1,\n            // Estimate duration based on priority\n            duration_minutes: {\n                $cond: [\n                    { $eq: [\"$priority\", \"high\"] },\n                    60, // High priority: 1 hour\n                    {\n                        $cond: [\n                            {\n                                $or: [\n                                    { $eq: [\"$priority\", \"medium\"] },\n                                    { $eq: [\"$priority\", \"initial\"] }\n                                ]\n                            },\n                            45, // Medium priority: 45 minutes\n                            30   // Low priority: 30 minutes\n                        ]\n                    }\n                ]\n            }\n        }\n    }\n];\n\n// Construct msg objects for each pipeline\nconst pendingTodosMsg = {\n    mode: 'collection',\n    collection: 'todos',\n    operation: 'aggregate',\n    payload: [pendingTodosPipeline],\n    // Add a property to indicate this is for pending todos \n    // so we can identify it in the MongoDB response handler\n    _pendingTodos: true\n};\n\nconst completedTodosMsg = {\n    mode: 'collection',\n    collection: 'todos',\n    operation: 'aggregate',\n    payload: [completedTodosPipeline]\n};\n\nconst scheduleMsg = {\n    mode: 'collection',\n    collection: 'todos',\n    operation: 'aggregate',\n    payload: [schedulePipeline]\n};\n\n// Log what we're requesting\nnode.warn(`Requesting ${pendingTodosPipeline.length} pending todos`);\nnode.warn(`Requesting ${completedTodosPipeline.length} completed todos`);\nnode.warn(`Requesting schedule data with ${schedulePipeline.length} pipeline stages`);\n\nreturn [\n    pendingTodosMsg,\n    completedTodosMsg,\n    scheduleMsg\n];\n",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 280,
        "wires": [
            [
                "5888e9abbdd921fb",
                "113ba209d97f6c49"
            ],
            [
                "a620aa1bc3bed03e",
                "113ba209d97f6c49"
            ],
            [
                "8b51e78e35a4372a"
            ]
        ],
        "inputLabels": [
            "Trigger dashboard update"
        ],
        "outputLabels": [
            "Get Pending Todos",
            "Get Completed Todos",
            "Generate Schedule Request"
        ],
        "icon": "node-red/db.svg"
    }
]
