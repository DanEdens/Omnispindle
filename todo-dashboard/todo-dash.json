[
    {
        "id": "0869aabc883a8824",
        "type": "tab",
        "label": "todo-dash",
        "disabled": false,
        "info": "Dashboard with MongoDB4 connection for FastMCP Todo Server"
    },
    {
        "id": "8b51e78e35a4372a",
        "type": "function",
        "z": "0869aabc883a8824",
        "name": "generate-schedule-request",
        "func": "// Generate tomorrow's date in YYYY-MM-DD format\nconst tomorrow = new Date();\ntomorrow.setDate(tomorrow.getDate() + 1);\nconst formattedDate = tomorrow.toISOString().split('T')[0];\n\nreturn {\n    payload: { date: formattedDate },\n    topic: \"todo/action/daily_schedule\"\n};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 380,
        "wires": [
            [
                "5255a1fba58994f9"
            ]
        ]
    },
    {
        "id": "5255a1fba58994f9",
        "type": "function",
        "z": "0869aabc883a8824",
        "name": "schedule-generator",
        "func": "// Get the scheduled todos from MongoDB\nlet todos = [];\n\n// Handle different possible payload structures from MongoDB4\nif (Array.isArray(msg.payload)) {\n    // If payload is already an array\n    todos = msg.payload;\n} else if (msg.payload && typeof msg.payload === 'object') {\n    // If payload is an object (common MongoDB4 output format)\n    if (Array.isArray(msg.payload.result)) {\n        // MongoDB4 sometimes wraps results in a 'result' property\n        todos = msg.payload.result;\n    } else if (msg.payload.toArray && Array.isArray(msg.payload.toArray)) {\n        // Or sometimes in a 'toArray' property\n        todos = msg.payload.toArray;\n    } else {\n        // Log what we received for debugging\n        node.warn(\"Unexpected payload structure from MongoDB:\");\n        node.warn(JSON.stringify(msg.payload, null, 2));\n        // Try to extract array from payload object if possible\n        todos = Object.values(msg.payload).find(val => Array.isArray(val)) || [];\n    }\n}\n\n// Debug payload structure\nnode.warn(`Received payload type: ${typeof msg.payload}`);\nif (typeof msg.payload === 'object') {\n    node.warn(`Payload keys: ${Object.keys(msg.payload).join(', ')}`);\n}\nnode.warn(`Extracted todos array with ${todos.length} items`);\n\n// Current date for the schedule\nconst today = new Date();\nconst dateStr = today.toISOString().split('T')[0]; // YYYY-MM-DD\n\n// Get day of week\nconst days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\nconst weekday = days[today.getDay()];\n\n// Define working hours\nconst workingHours = {\n    start: \"09:00\",\n    end: \"17:00\"\n};\n\n// Calculate available minutes in working day (8 hours = 480 minutes)\nconst availableMinutes = 480;\n\n// Generate schedule with time slots\nconst schedule = [];\nlet currentTime = new Date();\ncurrentTime.setHours(9, 0, 0, 0); // Start at 9 AM\n\n// Process each todo and assign a time slot\ntodos.forEach((todo, index) => {\n    // Skip if we're past working hours (4:15 PM is latest we can start a task)\n    if (currentTime.getHours() >= 16 && currentTime.getMinutes() >= 15) {\n        return;\n    }\n    \n    // Format start time\n    const startHour = currentTime.getHours().toString().padStart(2, '0');\n    const startMinute = currentTime.getMinutes().toString().padStart(2, '0');\n    const startTime = `${startHour}:${startMinute}`;\n    \n    // Calculate end time\n    const endTime = new Date(currentTime.getTime() + todo.duration_minutes * 60000);\n    const endHour = endTime.getHours().toString().padStart(2, '0');\n    const endMinute = endTime.getMinutes().toString().padStart(2, '0');\n    \n    // Add to schedule\n    schedule.push({\n        todo_id: todo.todo_id || todo._id || todo.id,\n        description: todo.description,\n        priority: todo.priority,\n        start_time: startTime,\n        end_time: `${endHour}:${endMinute}`,\n        duration_minutes: todo.duration_minutes,\n        notes: index === 0 ? \"Highest priority task for today\" : null\n    });\n    \n    // Move time forward for next task (add task duration + 15 min break)\n    currentTime = new Date(endTime.getTime() + 15 * 60000); // Add 15-minute break\n});\n\n// Calculate total scheduled minutes\nconst totalScheduledMinutes = schedule.reduce((total, task) => total + task.duration_minutes, 0);\n\n// Calculate utilization percentage\nconst utilizationPercentage = Math.round((totalScheduledMinutes / availableMinutes) * 100);\n\n// Format final output for dashboard\nconst scheduleData = {\n    date: dateStr,\n    weekday: weekday,\n    working_hours: workingHours,\n    schedule: schedule,\n    total_tasks: schedule.length,\n    total_scheduled_minutes: totalScheduledMinutes,\n    available_minutes: availableMinutes,\n    utilization_percentage: utilizationPercentage\n};\n\n// Debug output\nnode.warn(\"Generated schedule with \" + schedule.length + \" tasks\");\nnode.warn(\"Total scheduled time: \" + totalScheduledMinutes + \" minutes\");\nnode.warn(\"Utilization: \" + utilizationPercentage + \"%\");\n\nreturn { \n    payload: scheduleData,\n    topic: \"todo/dashboard/schedule\"\n};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 180,
        "wires": [
            [
                "62c39c6c81ae1807",
                "c9bb2d804fe2695f"
            ]
        ]
    },
    {
        "id": "5331cc952b2d028f",
        "type": "mqtt in",
        "z": "0869aabc883a8824",
        "d": true,
        "name": "Subscribe to Actions",
        "topic": "todo/action/#",
        "qos": "2",
        "datatype": "json",
        "broker": "5b41a831.e6efd8",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 105,
        "y": 100,
        "wires": [
            [
                "0d86d708a3175966",
                "2f37800e8acb5d1e"
            ]
        ],
        "l": false
    },
    {
        "id": "0d86d708a3175966",
        "type": "switch",
        "z": "0869aabc883a8824",
        "name": "Route by Action",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "todo/action/complete",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "todo/action/suggestions",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "todo/action/schedule",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "todo/action/daily_schedule",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "todo/action/refresh_todos",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 5,
        "x": 400,
        "y": 80,
        "wires": [
            [
                "d45638d20dbfa1f4"
            ],
            [
                "1defb14c4964e2f3"
            ],
            [
                "4e49619a9ac2be9d"
            ],
            [
                "5255a1fba58994f9"
            ],
            [
                "78d9d20b8ba62fc8"
            ]
        ]
    },
    {
        "id": "d45638d20dbfa1f4",
        "type": "function",
        "z": "0869aabc883a8824",
        "name": "mark-todo-complete",
        "func": "// Get the todo ID from the payload\nconst todoId = msg.payload.id;\n\nif (!todoId) {\n    return { payload: { status: \"error\", message: \"No todo ID provided\" } };\n}\n\n// Prepare MongoDB update query for MongoDB4 node\nreturn {\n    payload: {\n        // Find document by ID\n        filter: { id: todoId },\n        // Set status to completed and add completed timestamp\n        update: { $set: {\n            status: \"completed\",\n            completed_at: Math.floor(Date.now() / 1000)\n        }},\n        // Additional options\n        options: {\n            returnNewDocument: true\n        }\n    },\n    collection: \"todos\"\n};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 20,
        "wires": [
            [
                "78a2c1bb8ea5c4df"
            ]
        ]
    },
    {
        "id": "78a2c1bb8ea5c4df",
        "type": "mongodb4",
        "z": "0869aabc883a8824",
        "clientNode": "1cdab81a6028b016",
        "mode": "collection",
        "collection": "todos",
        "operation": "updateOne",
        "maxTimeMS": "",
        "handleDocId": false,
        "name": "Update Todo in MongoDB",
        "x": 1110,
        "y": 40,
        "wires": [
            [
                "544b7177e0b51a95"
            ]
        ]
    },
    {
        "id": "1defb14c4964e2f3",
        "type": "function",
        "z": "0869aabc883a8824",
        "name": "get-todo-suggestions",
        "func": "// Get the todo ID from the payload\nconst todoId = msg.payload.id;\n\nif (!todoId) {\n    return { payload: { status: \"error\", message: \"No todo ID provided\" } };\n}\n\n// Prepare MongoDB find query\nreturn {\n    payload: {\n        // Query for MongoDB4 node format\n        filter: { id: todoId }\n    },\n    collection: \"todos\"\n};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 60,
        "wires": [
            [
                "43e9bfb29185dd03"
            ]
        ]
    },
    {
        "id": "4e49619a9ac2be9d",
        "type": "function",
        "z": "0869aabc883a8824",
        "name": "schedule-todo",
        "func": "// Get the todo ID from the payload\nconst todoId = msg.payload.id;\n\nif (!todoId) {\n    return { payload: { status: \"error\", message: \"No todo ID provided\" } };\n}\n\n// Generate tomorrow's date in YYYY-MM-DD format\nconst tomorrow = new Date();\ntomorrow.setDate(tomorrow.getDate() + 1);\nconst formattedDate = tomorrow.toISOString().split('T')[0];\n\n// Prepare MongoDB find query\nreturn {\n    payload: {\n        // Query for MongoDB4 node format\n        filter: { id: todoId }\n    },\n    collection: \"todos\",\n    // Store date in msg so we can use it later\n    date: formattedDate\n};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 100,
        "wires": [
            [
                "43e9bfb29185dd03"
            ]
        ]
    },
    {
        "id": "43e9bfb29185dd03",
        "type": "mongodb4",
        "z": "0869aabc883a8824",
        "clientNode": "1cdab81a6028b016",
        "mode": "collection",
        "collection": "todos",
        "operation": "find",
        "maxTimeMS": "",
        "handleDocId": false,
        "name": "Find Todo by ID",
        "x": 1080,
        "y": 100,
        "wires": [
            [
                "b49303a7b3905c0a",
                "544b7177e0b51a95"
            ]
        ]
    },
    {
        "id": "b49303a7b3905c0a",
        "type": "function",
        "z": "0869aabc883a8824",
        "name": "process-todo-result",
        "func": "// Check if we found a todo\nif (!msg.payload || msg.payload.length === 0) {\n    return { payload: { status: \"error\", message: \"Todo not found\" } };\n}\n\n// Get the first todo from the results\nconst todo = msg.payload[0];\n\n// Check which action we're performing\nif (msg.topic === \"todo/action/suggestions\") {\n    // Create a specific suggestion response for this todo\n    const response = {\n        todo: {\n            id: todo.id,\n            description: todo.description,\n            current_priority: todo.priority || \"medium\",\n            status: todo.status\n        },\n        suggestions: {\n            suggested_priority: suggestPriority(todo),\n            estimated_completion_time: estimateCompletionTime(todo),\n            automation_confidence: Math.round(60 + Math.random() * 25)\n        }\n    };\n    \n    return {\n        payload: response,\n        topic: \"todo/dashboard/suggestions\"\n    };\n} else if (msg.topic.includes(\"schedule\")) {\n    // Get the date (either from the msg.date or default to tomorrow)\n    const targetDate = msg.date || (() => {\n        const tomorrow = new Date();\n        tomorrow.setDate(tomorrow.getDate() + 1);\n        return tomorrow.toISOString().split('T')[0];\n    })();\n    \n    // Create a schedule specifically for this todo\n    const scheduleResponse = createScheduleForTodo(todo, targetDate);\n    \n    return {\n        payload: scheduleResponse,\n        topic: \"todo/dashboard/schedule\"\n    };\n}\n\n// Helper function to suggest priority\nfunction suggestPriority(todo) {\n    // Simple logic - but in real app would be more sophisticated\n    const description = todo.description.toLowerCase();\n    \n    if (description.includes(\"urgent\") || description.includes(\"important\")) {\n        return \"high\";\n    }\n    \n    if (description.includes(\"review\") || description.includes(\"meeting\")) {\n        return \"medium\";\n    }\n    \n    return todo.priority || \"medium\";\n}\n\n// Helper function to estimate completion time\nfunction estimateCompletionTime(todo) {\n    // Simple logic - but in real app would analyze similar tasks\n    const priority = todo.priority || \"medium\";\n    \n    // Estimate in minutes\n    const estimates = {\n        \"high\": 90,\n        \"medium\": 60,\n        \"low\": 45,\n        \"initial\": 60\n    };\n    \n    return estimates[priority];\n}\n\n// Create a schedule for a specific todo\nfunction createScheduleForTodo(todo, dateStr) {\n    // Create a Date object from the target date\n    const date = new Date(dateStr);\n    const weekday = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"][date.getDay()];\n    \n    // Define working hours based on the day of the week\n    let workingHours;\n    const day = date.getDay();\n    \n    if (day === 0) { // Sunday\n        workingHours = { start: \"10:00\", end: \"14:00\" };\n    } else if (day === 6) { // Saturday\n        workingHours = { start: \"10:00\", end: \"15:00\" };\n    } else { // Weekday\n        workingHours = { start: \"09:00\", end: \"17:00\" };\n    }\n    \n    // Calculate available minutes\n    function timeToMinutes(timeStr) {\n        const [hours, minutes] = timeStr.split(':').map(Number);\n        return hours * 60 + minutes;\n    }\n    \n    function minutesToTime(totalMinutes) {\n        const hours = Math.floor(totalMinutes / 60);\n        const minutes = totalMinutes % 60;\n        return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\n    }\n    \n    const startMinutes = timeToMinutes(workingHours.start);\n    const endMinutes = timeToMinutes(workingHours.end);\n    const availableMinutes = endMinutes - startMinutes;\n    \n    // Duration based on priority\n    const durations = {\n        \"high\": 90,\n        \"medium\": 60,\n        \"low\": 45,\n        \"initial\": 60\n    };\n    \n    const duration = durations[todo.priority || \"medium\"];\n    \n    // Calculate a good time slot based on priority\n    let startTimeMinutes;\n    if (todo.priority === \"high\") {\n        // Schedule high priority in the morning\n        startTimeMinutes = startMinutes + 60; // 1 hour after start\n    } else if (todo.priority === \"low\") {\n        // Schedule low priority in the afternoon\n        startTimeMinutes = endMinutes - duration - 60; // 1 hour before end\n    } else {\n        // Schedule medium priority in mid-day\n        startTimeMinutes = startMinutes + Math.floor((availableMinutes - duration) / 2);\n    }\n    \n    // Ensure within bounds\n    if (startTimeMinutes < startMinutes) {\n        startTimeMinutes = startMinutes;\n    }\n    if (startTimeMinutes + duration > endMinutes) {\n        startTimeMinutes = endMinutes - duration;\n    }\n    \n    // Format times\n    const startTimeStr = minutesToTime(startTimeMinutes);\n    const endTimeStr = minutesToTime(startTimeMinutes + duration);\n    \n    // Create the schedule\n    return {\n        date: dateStr,\n        weekday: weekday,\n        working_hours: workingHours,\n        schedule: [\n            {\n                todo_id: todo.id,\n                description: todo.description,\n                priority: todo.priority || \"medium\",\n                start_time: startTimeStr,\n                end_time: endTimeStr,\n                duration_minutes: duration\n            }\n        ],\n        total_tasks: 1,\n        total_scheduled_minutes: duration,\n        available_minutes: availableMinutes,\n        utilization_percentage: Math.round((duration / availableMinutes) * 100)\n    };\n}",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 160,
        "wires": [
            [
                "42b5f5036f5e065c"
            ]
        ]
    },
    {
        "id": "a620aa1bc3bed03e",
        "type": "mongodb4",
        "z": "0869aabc883a8824",
        "clientNode": "1cdab81a6028b016",
        "mode": "collection",
        "collection": "todos",
        "operation": "aggregate",
        "maxTimeMS": "",
        "handleDocId": false,
        "name": "Get Completed Todos",
        "x": 540,
        "y": 320,
        "wires": [
            [
                "0f3a724318497e0a",
                "5d3c8169126dc559"
            ]
        ]
    },
    {
        "id": "78d9d20b8ba62fc8",
        "type": "function",
        "z": "0869aabc883a8824",
        "name": "set-aggregate-parameters",
        "func": "// Get Pending Todos Pipeline\nconst pendingTodosPipeline = [\n    // Match pending todos\n    { $match: { status: \"pending\" } },\n\n    // Sort by priority (asc) and created date (asc)\n    { $sort: { priority: 1, created_at: 1 } }\n\n    // Could add limit stage here if needed\n];\n\n// Get Completed Todos Pipeline\nconst completedTodosPipeline = [\n    // Match completed todos\n    { $match: { status: \"completed\" } },\n\n    // Sort by completed date (desc)\n    { $sort: { completed_at: -1 } },\n\n    // Limit to last 50\n    { $limit: 50 }\n];\n\n// Schedule Pipeline - for generating daily schedule data\nconst schedulePipeline = [\n    // Get only pending todos for scheduling\n    { $match: { status: \"pending\" } },\n\n    // Sort todos by priority first (high priority first)\n    // The sort order is opposite from pending todos list because we want high priority first\n    {\n        $sort: {\n            // Convert priority to numeric value for sorting\n            // high: 1, medium/initial: 2, low: 3\n            $cond: [\n                { $eq: [\"$priority\", \"high\"] },\n                1,\n                {\n                    $cond: [\n                        {\n                            $or: [\n                                { $eq: [\"$priority\", \"medium\"] },\n                                { $eq: [\"$priority\", \"initial\"] }\n                            ]\n                        },\n                        2,\n                        3\n                    ]\n                }\n            ],\n            // Then by creation date (newer first)\n            created_at: -1\n        }\n    },\n\n    // Limit to a reasonable number of tasks per day\n    { $limit: 8 },\n\n    // Project to add scheduling metadata\n    {\n        $project: {\n            _id: 0,\n            todo_id: \"$id\",\n            description: 1,\n            priority: 1,\n            status: 1,\n            created_at: 1,\n            // Estimate duration based on priority\n            duration_minutes: {\n                $cond: [\n                    { $eq: [\"$priority\", \"high\"] },\n                    60, // High priority: 1 hour\n                    {\n                        $cond: [\n                            {\n                                $or: [\n                                    { $eq: [\"$priority\", \"medium\"] },\n                                    { $eq: [\"$priority\", \"initial\"] }\n                                ]\n                            },\n                            45, // Medium priority: 45 minutes\n                            30   // Low priority: 30 minutes\n                        ]\n                    }\n                ]\n            }\n        }\n    }\n];\n\n// Construct msg objects for each pipeline\nconst pendingTodosMsg = {\n    mode: 'collection',\n    collection: 'todos',\n    operation: 'aggregate',\n    payload: [pendingTodosPipeline],\n    // Add a property to indicate this is for pending todos \n    // so we can identify it in the MongoDB response handler\n    _pendingTodos: true\n};\n\nconst completedTodosMsg = {\n    mode: 'collection',\n    collection: 'todos',\n    operation: 'aggregate',\n    payload: [completedTodosPipeline]\n};\n\nconst scheduleMsg = {\n    mode: 'collection',\n    collection: 'todos',\n    operation: 'aggregate',\n    payload: [schedulePipeline]\n};\n\n// Log what we're requesting\nnode.warn(`Requesting ${pendingTodosPipeline.length} pending todos`);\nnode.warn(`Requesting ${completedTodosPipeline.length} completed todos`);\nnode.warn(`Requesting schedule data with ${schedulePipeline.length} pipeline stages`);\n\nreturn [\n    pendingTodosMsg,\n    completedTodosMsg,\n    scheduleMsg\n];\n",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 300,
        "wires": [
            [
                "5888e9abbdd921fb",
                "113ba209d97f6c49"
            ],
            [
                "a620aa1bc3bed03e",
                "113ba209d97f6c49"
            ],
            [
                "8b51e78e35a4372a"
            ]
        ],
        "inputLabels": [
            "Trigger dashboard update"
        ],
        "outputLabels": [
            "Get Pending Todos",
            "Get Completed Todos",
            "Generate Schedule Request"
        ],
        "icon": "node-red/db.svg"
    },
    {
        "id": "e69f9326d99976d3",
        "type": "inject",
        "z": "0869aabc883a8824",
        "name": "Update Dashboard (120s)",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "120",
        "crontab": "",
        "once": true,
        "onceDelay": "0.5",
        "topic": "",
        "payload": "{}",
        "payloadType": "json",
        "x": 180,
        "y": 240,
        "wires": [
            [
                "78d9d20b8ba62fc8"
            ]
        ]
    },
    {
        "id": "5888e9abbdd921fb",
        "type": "mongodb4",
        "z": "0869aabc883a8824",
        "clientNode": "1cdab81a6028b016",
        "mode": "collection",
        "collection": "todos",
        "operation": "aggregate",
        "output": "toArray",
        "maxTimeMS": "",
        "handleDocId": false,
        "name": "Get Pending Todos",
        "x": 530,
        "y": 260,
        "wires": [
            [
                "d808e221249ea433",
                "5d3c8169126dc559"
            ]
        ]
    },
    {
        "id": "d808e221249ea433",
        "type": "function",
        "z": "0869aabc883a8824",
        "name": "format-todos-for-dashboard",
        "func": "// Get all the todos\nconst todos = msg.payload || [];\n\n// Count priorities\nconst highPriority = todos.filter(todo => todo.priority === \"high\").length;\nconst mediumPriority = todos.filter(todo => todo.priority === \"medium\" || todo.priority === \"initial\").length;\nconst lowPriority = todos.filter(todo => todo.priority === \"low\").length;\n\n// Sort pending todos by priority and creation date\nconst priorityRank = {\"high\": 0, \"medium\": 1, \"low\": 2, \"initial\": 1};\ntodos.sort((a, b) => {\n    // First by priority\n    const priorityDiff = priorityRank[a.priority || \"medium\"] - priorityRank[b.priority || \"medium\"];\n    if (priorityDiff !== 0) return priorityDiff;\n    \n    // Then by creation date (descending)\n    return (b.created_at || 0) - (a.created_at || 0);\n});\n\n// Store pending todos in global context for other nodes to use\nglobal.set(\"pendingTodos\", todos);\n\n// Get completed todos count (if available)\nconst completedTodos = global.get(\"completedTodos\") || [];\n\n// Format for dashboard\nconst dashboardData = {\n    todos: todos,\n    total_pending: todos.length,\n    total_completed: completedTodos.length,\n    high_priority: highPriority,\n    medium_priority: mediumPriority,\n    low_priority: lowPriority,\n    last_updated: new Date().toISOString()\n};\n\n// Debug output\nnode.warn(\"Publishing todos to dashboard: \" + todos.length + \" todos\");\nnode.warn(\"Priorities - High: \" + highPriority + \", Medium: \" + mediumPriority + \", Low: \" + lowPriority);\n\n\nreturn {\n    payload: dashboardData,\n    topic: \"todo/dashboard/todos\"\n};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 140,
        "wires": [
            [
                "62c39c6c81ae1807",
                "c9bb2d804fe2695f"
            ]
        ]
    },
    {
        "id": "0f3a724318497e0a",
        "type": "function",
        "z": "0869aabc883a8824",
        "name": "ai-pattern-analysis",
        "func": "// Get completed todos from MongoDB\nconst completedTodos = msg.payload || [];\n\n// Store in global context for other nodes to use\nglobal.set(\"completedTodos\", completedTodos);\n\n// Sort completed todos by completion date (descending)\ncompletedTodos.sort((a, b) => (b.completed_at || 0) - (a.completed_at || 0));\n\n// Limit to most recent for dashboard\nconst recentCompleted = completedTodos.slice(0, 5);\n\n// Find patterns in similar tasks (simplified implementation)\nfunction findPatterns(todos) {\n    const patterns = [];\n    \n    // Group by words in description\n    const taskGroups = {};\n    \n    todos.forEach(todo => {\n        const words = todo.description.toLowerCase().split(/\\s+/).filter(w => w.length > 4);\n        \n        words.forEach(word => {\n            if (!taskGroups[word]) {\n                taskGroups[word] = [];\n            }\n            \n            // Only add if not already in the group\n            if (!taskGroups[word].find(t => t.id === todo.id)) {\n                taskGroups[word].push(todo);\n            }\n        });\n    });\n    \n    // Find patterns with at least 2 todos\n    Object.keys(taskGroups).forEach(word => {\n        if (taskGroups[word].length >= 2) {\n            patterns.push({\n                pattern_id: `pattern-${patterns.length + 1}`,\n                keyword: word,\n                similar_tasks: taskGroups[word].length,\n                template: `${word} task`,\n                automation_confidence: Math.round(60 + (taskGroups[word].length * 5)),\n                examples: taskGroups[word].slice(0, 3).map(t => t.description)\n            });\n        }\n    });\n    \n    return patterns.slice(0, 3); // Return top 3 patterns\n}\n\n// Generate simple recommendations\nfunction generateRecommendations(todos) {\n    const recommendations = [];\n    \n    // Find pending todos similar to completed todos\n    const pendingTodos = global.get(\"pendingTodos\") || [];\n    \n    // For demo, just recommend high priority for first few todos\n    pendingTodos.slice(0, 2).forEach(todo => {\n        if (todo.priority !== \"high\") {\n            recommendations.push({\n                todo_id: todo.id,\n                description: todo.description,\n                current_priority: todo.priority || \"medium\",\n                recommended_priority: \"high\",\n                confidence: Math.round(70 + Math.random() * 20)\n            });\n        }\n    });\n    \n    return recommendations;\n}\n\n// Format AI suggestions for dashboard\nconst aiSuggestions = {\n    automation_suggestions: findPatterns(completedTodos),\n    priority_recommendations: generateRecommendations(completedTodos),\n    pattern_analysis: {\n        total_patterns: completedTodos.length > 0 ? Math.min(3, Math.floor(completedTodos.length / 2)) : 0,\n        analyzed_todos: completedTodos.length\n    },\n    completed: recentCompleted\n};\n\n// Debug output\nnode.warn(\"Publishing AI suggestions with \" + aiSuggestions.automation_suggestions.length + \" automation suggestions\");\nnode.warn(\"Publishing \" + aiSuggestions.priority_recommendations.length + \" priority recommendations\");\nnode.warn(\"Including \" + recentCompleted.length + \" recently completed todos\");\n\nreturn { \n    payload: aiSuggestions,\n    topic: \"todo/dashboard/suggestions\"\n};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 790,
        "y": 220,
        "wires": [
            [
                "62c39c6c81ae1807",
                "c9bb2d804fe2695f"
            ]
        ]
    },
    {
        "id": "4dc4232e096438e5",
        "type": "mqtt out",
        "z": "0869aabc883a8824",
        "d": true,
        "name": "Publish to Dashboard",
        "topic": "",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5b41a831.e6efd8",
        "x": 235.00000381469727,
        "y": 610.0000019073486,
        "wires": []
    },
    {
        "id": "5d3c8169126dc559",
        "type": "debug",
        "z": "0869aabc883a8824",
        "name": "todo-db-output",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 715,
        "y": 280,
        "wires": [],
        "l": false
    },
    {
        "id": "113ba209d97f6c49",
        "type": "debug",
        "z": "0869aabc883a8824",
        "name": "set-aggergate-parameters-debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 395,
        "y": 260,
        "wires": [],
        "l": false
    },
    {
        "id": "62c39c6c81ae1807",
        "type": "debug",
        "z": "0869aabc883a8824",
        "name": "publish-to-dashboard-debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 965,
        "y": 160,
        "wires": [],
        "l": false
    },
    {
        "id": "2f37800e8acb5d1e",
        "type": "debug",
        "z": "0869aabc883a8824",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 160,
        "y": 40,
        "wires": []
    },
    {
        "id": "b77d615373439387",
        "type": "mqtt in",
        "z": "0869aabc883a8824",
        "d": true,
        "name": "Todo Updates",
        "topic": "todo/dashboard/#",
        "qos": "1",
        "datatype": "json",
        "broker": "5b41a831.e6efd8",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 185.00000381469727,
        "y": 450.00000190734863,
        "wires": [
            [
                "df5047691ee23252"
            ]
        ]
    },
    {
        "id": "df5047691ee23252",
        "type": "switch",
        "z": "0869aabc883a8824",
        "name": "Route by Topic",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "todo/dashboard/todos",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "todo/dashboard/suggestions",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "todo/dashboard/schedule",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 262.00001525878906,
        "y": 546.000072479248,
        "wires": [
            [
                "6a024b8d72e70f0b"
            ],
            [
                "b9eb99ec1c3c2972"
            ],
            [
                "8de09bc2448e4bdb"
            ]
        ]
    },
    {
        "id": "6a024b8d72e70f0b",
        "type": "ui_template",
        "z": "0869aabc883a8824",
        "group": "g-todos",
        "name": "Todo List",
        "order": 1,
        "width": 12,
        "height": "20",
        "format": "<!-- Todo List Panel for FastMCP Todo Server Dashboard -->\n\n<style>\n    .todo-container {\n        font-family: 'Roboto', sans-serif;\n        padding: 0 10px;\n    }\n\n    .todo-stats {\n        background-color: #f5f5f5;\n        border-radius: 8px;\n        padding: 15px;\n        margin-bottom: 20px;\n        display: flex;\n        flex-wrap: wrap;\n    }\n\n    .stats-item {\n        margin-right: 25px;\n        margin-bottom: 10px;\n        text-align: center;\n    }\n\n    .stats-value {\n        font-size: 24px;\n        font-weight: 500;\n        color: #212121;\n        margin-bottom: 5px;\n    }\n\n    .stats-label {\n        font-size: 13px;\n        color: #757575;\n    }\n\n    .todo-actions {\n        margin-bottom: 20px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n    }\n\n    .filter-options {\n        display: flex;\n        gap: 10px;\n    }\n\n    .filter-button {\n        padding: 6px 12px;\n        border-radius: 16px;\n        border: 1px solid #e0e0e0;\n        background-color: white;\n        font-size: 13px;\n        cursor: pointer;\n        transition: all 0.2s;\n    }\n\n    .filter-button:hover {\n        background-color: #f5f5f5;\n    }\n\n    .filter-button.active {\n        background-color: #e3f2fd;\n        border-color: #90caf9;\n        color: #1976d2;\n    }\n\n    .search-field {\n        position: relative;\n        flex-grow: 1;\n        max-width: 300px;\n        margin-left: 10px;\n    }\n\n    .search-field input {\n        width: 100%;\n        padding: 8px 12px 8px 35px;\n        border-radius: 20px;\n        border: 1px solid #e0e0e0;\n        font-size: 14px;\n    }\n\n    .search-icon {\n        position: absolute;\n        left: 12px;\n        top: 50%;\n        transform: translateY(-50%);\n        color: #9e9e9e;\n        font-size: 16px;\n    }\n\n    .todo-list {\n        margin-bottom: 20px;\n    }\n\n    .todo-item {\n        margin-bottom: 15px;\n        padding: 0;\n        border-radius: 8px;\n        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.08);\n        background-color: white;\n        transition: all 0.3s ease;\n        overflow: hidden;\n    }\n\n    .todo-item:hover {\n        transform: translateY(-2px);\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);\n    }\n\n    .todo-item.high {\n        border-left: 6px solid #e53935;\n    }\n\n    .todo-item.medium,\n    .todo-item.initial {\n        border-left: 6px solid #fb8c00;\n    }\n\n    .todo-item.low {\n        border-left: 6px solid #43a047;\n    }\n\n    .todo-content {\n        padding: 15px;\n        cursor: pointer;\n    }\n\n    .todo-header {\n        display: flex;\n        justify-content: space-between;\n        align-items: flex-start;\n        margin-bottom: 10px;\n    }\n\n    .todo-title {\n        font-weight: 500;\n        font-size: 16px;\n        color: #212121;\n        margin-right: 10px;\n        word-break: break-word;\n    }\n\n    .todo-meta {\n        display: flex;\n        flex-wrap: wrap;\n        gap: 8px;\n        align-items: center;\n        margin-top: 10px;\n        color: #757575;\n        font-size: 13px;\n    }\n\n    .todo-priority {\n        font-size: 12px;\n        text-transform: uppercase;\n        padding: 2px 8px;\n        border-radius: 12px;\n        font-weight: 500;\n        flex-shrink: 0;\n    }\n\n    .todo-item.high .todo-priority {\n        background-color: #ffebee;\n        color: #c62828;\n    }\n\n    .todo-item.medium .todo-priority,\n    .todo-item.initial .todo-priority {\n        background-color: #fff3e0;\n        color: #e65100;\n    }\n\n    .todo-item.low .todo-priority {\n        background-color: #e8f5e9;\n        color: #2e7d32;\n    }\n\n    .todo-date {\n        color: #757575;\n        font-size: 13px;\n        flex-shrink: 0;\n    }\n\n    .todo-id {\n        font-size: 12px;\n        color: #9e9e9e;\n        font-family: monospace;\n    }\n\n    .todo-buttons {\n        display: flex;\n        flex-wrap: wrap;\n        gap: 8px;\n        padding: 0 15px 15px 15px;\n    }\n\n    .action-button {\n        padding: 6px 12px;\n        border-radius: 4px;\n        font-size: 13px;\n        text-transform: uppercase;\n        font-weight: 500;\n        border: none;\n        cursor: pointer;\n        transition: background-color 0.2s;\n        display: flex;\n        align-items: center;\n    }\n\n    .action-button .action-icon {\n        margin-right: 6px;\n    }\n\n    .complete-button {\n        background-color: #e8f5e9;\n        color: #2e7d32;\n    }\n\n    .complete-button:hover {\n        background-color: #c8e6c9;\n    }\n\n    .suggestions-button {\n        background-color: #e3f2fd;\n        color: #1565c0;\n    }\n\n    .suggestions-button:hover {\n        background-color: #bbdefb;\n    }\n\n    .schedule-button {\n        background-color: #fff3e0;\n        color: #e65100;\n    }\n\n    .schedule-button:hover {\n        background-color: #ffe0b2;\n    }\n\n    .empty-message {\n        color: #757575;\n        font-style: italic;\n        padding: 20px;\n        text-align: center;\n        background-color: #f5f5f5;\n        border-radius: 8px;\n    }\n\n    .recently-completed {\n        margin-top: 30px;\n    }\n\n    .section-header {\n        font-size: 18px;\n        font-weight: 500;\n        color: #424242;\n        margin-bottom: 15px;\n        border-bottom: 2px solid #e0e0e0;\n        padding-bottom: 8px;\n    }\n\n    .completed-item {\n        padding: 10px 15px;\n        border-radius: 8px;\n        background-color: #f5f5f5;\n        margin-bottom: 10px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n    }\n\n    .completed-title {\n        color: #757575;\n        text-decoration: line-through;\n        margin-right: 10px;\n    }\n\n    .completed-time {\n        font-size: 12px;\n        color: #9e9e9e;\n    }\n\n    /* Debug info */\n    .debug-info {\n        margin-top: 20px;\n        padding: 10px;\n        background-color: #f8f9fa;\n        border: 1px solid #ddd;\n        border-radius: 4px;\n        font-family: monospace;\n        font-size: 12px;\n        white-space: pre-wrap;\n    }\n</style>\n\n<div class=\"todo-container\">\n    <div class=\"todo-stats\">\n        <div class=\"stats-item\">\n            <div class=\"stats-value\">{{parsedPayload.total_pending || 0}}</div>\n            <div class=\"stats-label\">Pending Tasks</div>\n        </div>\n\n        <div class=\"stats-item\">\n            <div class=\"stats-value\">{{parsedPayload.total_completed || 0}}</div>\n            <div class=\"stats-label\">Completed Tasks</div>\n        </div>\n\n        <div class=\"stats-item\" ng-if=\"parsedPayload.high_priority\">\n            <div class=\"stats-value\" style=\"color: #e53935;\">{{parsedPayload.high_priority || 0}}</div>\n            <div class=\"stats-label\">High Priority</div>\n        </div>\n\n        <div class=\"stats-item\">\n            <div class=\"stats-value\" style=\"color: #fb8c00;\">{{parsedPayload.medium_priority || 0}}</div>\n            <div class=\"stats-label\">Medium Priority</div>\n        </div>\n\n        <div class=\"stats-item\">\n            <div class=\"stats-value\" style=\"color: #43a047;\">{{parsedPayload.low_priority || 0}}</div>\n            <div class=\"stats-label\">Low Priority</div>\n        </div>\n    </div>\n\n    <div class=\"todo-actions\">\n        <div class=\"filter-options\">\n            <button class=\"filter-button active\" ng-click=\"filterTodos('all')\">All</button>\n            <button class=\"filter-button\" ng-click=\"filterTodos('high')\">High Priority</button>\n            <button class=\"filter-button\" ng-click=\"filterTodos('medium')\">Medium</button>\n            <button class=\"filter-button\" ng-click=\"filterTodos('low')\">Low</button>\n        </div>\n\n        <div class=\"search-field\">\n            <i class=\"fa fa-search search-icon\"></i>\n            <input type=\"text\" placeholder=\"Search tasks...\" ng-model=\"searchText\" />\n        </div>\n    </div>\n\n    <div class=\"todo-list\">\n        <div ng-if=\"parsedPayload.todos && parsedPayload.todos.length > 0\">\n            <div ng-repeat=\"item in parsedPayload.todos | filter:searchFilter\" class=\"todo-item {{item.priority}}\">\n                <div class=\"todo-content\" ng-click=\"item.expanded = !item.expanded\">\n                    <div class=\"todo-header\">\n                        <div class=\"todo-title\">{{item.description}}</div>\n                        <div>\n                            <span class=\"todo-priority\">{{item.priority}}</span>\n                        </div>\n                    </div>\n\n                    <div class=\"todo-meta\">\n                        <span class=\"todo-date\" ng-if=\"item.created_at\">\n              Created: {{item.created_at | date:'MMM d, yyyy'}}\n            </span>\n                        <span class=\"todo-id\" ng-if=\"item.id\">\n              #{{item.id.substring(0,8)}}\n            </span>\n                    </div>\n                </div>\n\n                <div class=\"todo-buttons\">\n                    <button class=\"action-button complete-button\" ng-click=\"send({payload: {action: 'complete', id: item.id}})\">\n            <i class=\"fa fa-check action-icon\"></i> Complete\n          </button>\n                    <button class=\"action-button suggestions-button\" ng-click=\"send({payload: {action: 'suggestions', id: item.id}})\">\n            <i class=\"fa fa-lightbulb-o action-icon\"></i> AI Insights\n          </button>\n                    <button class=\"action-button schedule-button\" ng-click=\"send({payload: {action: 'schedule', id: item.id}})\">\n            <i class=\"fa fa-calendar action-icon\"></i> Schedule\n          </button>\n                </div>\n            </div>\n        </div>\n\n        <div ng-if=\"!parsedPayload.todos || parsedPayload.todos.length === 0\" class=\"empty-message\">\n            <p>No pending todo items found.</p>\n            <p>Create new tasks to get started.</p>\n        </div>\n    </div>\n\n    <div class=\"recently-completed\" ng-if=\"parsedPayload.completed && parsedPayload.completed.length > 0\">\n        <h3 class=\"section-header\">Recently Completed</h3>\n        <div ng-repeat=\"item in parsedPayload.completed | limitTo:5\" class=\"completed-item\">\n            <div class=\"completed-title\">{{item.description}}</div>\n            <div class=\"completed-time\" ng-if=\"item.completed_at\">\n                {{item.completed_at | date:'MMM d, h:mm a'}}\n            </div>\n        </div>\n    </div>\n\n    <!-- Debug section to help troubleshoot data flow -->\n    <div class=\"debug-info\">\n        <div>Last Updated: {{parsedPayload.last_updated | date:'MMM d, yyyy h:mm:ss a'}}</div>\n        <div>Topic: {{msg.topic}}</div>\n        <div>Raw Payload: {{msg.payload}}</div>\n        <div>Todos Count: {{(parsedPayload.todos || []).length}}</div>\n        <div>Completed Count: {{(parsedPayload.completed || []).length}}</div>\n    </div>\n</div>\n\n<script>\n    (function(scope) {\n    // Parse JSON payload if it's a string\n    scope.$watch('msg.payload', function(payload) {\n      if (payload && typeof payload === 'string') {\n        try {\n          scope.parsedPayload = JSON.parse(payload);\n        } catch(e) {\n          console.error('Error parsing payload JSON:', e);\n          scope.parsedPayload = {};\n        }\n      } else {\n        scope.parsedPayload = payload || {};\n      }\n    });\n\n    // Initialize active filter\n    scope.activeFilter = 'all';\n    scope.searchText = '';\n\n    // Filter function for todos\n    scope.filterTodos = function(filter) {\n      scope.activeFilter = filter;\n\n      // Update active button styling\n      angular.element(document.querySelectorAll('.filter-button'))\n        .removeClass('active');\n      angular.element(event.target).addClass('active');\n    };\n\n    // Search filter function\n    scope.searchFilter = function(item) {\n      // First apply priority filter\n      if (scope.activeFilter !== 'all' && item.priority !== scope.activeFilter) {\n        return false;\n      }\n\n      // Then apply text search if there is search text\n      if (scope.searchText && scope.searchText.length > 0) {\n        return item.description.toLowerCase().includes(scope.searchText.toLowerCase());\n      }\n\n      return true;\n    };\n  })(scope);\n</script>\n\n<!--\nNode-RED Message Format:\n{\n  \"todos\": [\n    {\n      \"id\": \"123e4567-e89b-12d3-a456-426614174000\",\n      \"description\": \"Prepare weekly report\",\n      \"priority\": \"high\",\n      \"status\": \"pending\",\n      \"created_at\": 1682424116000\n    },\n    {\n      \"id\": \"223e4567-e89b-12d3-a456-426614174001\",\n      \"description\": \"Schedule team meeting\",\n      \"priority\": \"medium\",\n      \"status\": \"pending\",\n      \"created_at\": 1682510516000\n    }\n  ],\n  \"completed\": [\n    {\n      \"id\": \"323e4567-e89b-12d3-a456-426614174002\",\n      \"description\": \"Review pull request\",\n      \"priority\": \"high\",\n      \"status\": \"completed\",\n      \"created_at\": 1682424116000,\n      \"completed_at\": 1682434916000\n    }\n  ],\n  \"total_pending\": 2,\n  \"total_completed\": 1,\n  \"high_priority\": 1,\n  \"medium_priority\": 1,\n  \"low_priority\": 0,\n  \"last_updated\": \"2023-05-15T14:30:00Z\"\n}\n-->",
        "storeOutMessages": true,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 482.00001525878906,
        "y": 506.00007247924805,
        "wires": [
            [
                "373f8631915daeef",
                "013bc675b103b356"
            ]
        ]
    },
    {
        "id": "b9eb99ec1c3c2972",
        "type": "ui_template",
        "z": "0869aabc883a8824",
        "group": "g-suggestions",
        "name": "AI Suggestions",
        "order": 1,
        "width": 12,
        "height": "20",
        "format": "<!-- AI Suggestions Panel for FastMCP Todo Server Dashboard -->\n\n<script>\n    (function(scope) {\n    // Parse JSON payload if it's a string\n    scope.$watch('msg.payload', function(payload) {\n      if (payload && typeof payload === 'string') {\n        try {\n          scope.parsedPayload = JSON.parse(payload);\n        } catch(e) {\n          console.error('Error parsing payload JSON:', e);\n          scope.parsedPayload = {};\n        }\n      } else {\n        scope.parsedPayload = payload || {};\n      }\n    });\n  })(scope);\n</script>\n\n<style>\n    .suggestions-panel {\n        font-family: 'Roboto', sans-serif;\n        padding: 0 10px;\n    }\n\n    .suggestion-item,\n    .recommendation-item {\n        padding: 15px;\n        margin-bottom: 15px;\n        border-radius: 8px;\n        background-color: #e3f2fd;\n        border-left: 6px solid #2196f3;\n        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n        transition: all 0.3s ease;\n    }\n\n    .suggestion-item:hover,\n    .recommendation-item:hover {\n        transform: translateY(-2px);\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);\n    }\n\n    .suggestion-title,\n    .recommendation-title {\n        font-weight: bold;\n        display: block;\n        margin-bottom: 10px;\n        font-size: 16px;\n        color: #1565c0;\n    }\n\n    .suggestion-confidence {\n        font-size: 12px;\n        background-color: #bbdefb;\n        color: #0d47a1;\n        padding: 3px 8px;\n        border-radius: 12px;\n        display: inline-block;\n        margin-left: 10px;\n    }\n\n    .similar-tasks {\n        margin-top: 8px;\n        font-size: 13px;\n        color: #546e7a;\n    }\n\n    .recommendation-details {\n        display: flex;\n        align-items: center;\n        margin-top: 8px;\n    }\n\n    .priority-change {\n        display: flex;\n        align-items: center;\n    }\n\n    .priority-badge {\n        padding: 3px 8px;\n        border-radius: 12px;\n        font-size: 12px;\n        margin: 0 5px;\n    }\n\n    .priority-high {\n        background-color: #ffebee;\n        color: #c62828;\n    }\n\n    .priority-medium,\n    .priority-initial {\n        background-color: #fff3e0;\n        color: #e65100;\n    }\n\n    .priority-low {\n        background-color: #e8f5e9;\n        color: #2e7d32;\n    }\n\n    .priority-arrow {\n        font-size: 18px;\n        margin: 0 5px;\n        color: #546e7a;\n    }\n\n    .pattern-summary {\n        background-color: #f5f5f5;\n        border-radius: 8px;\n        padding: 12px;\n        margin-top: 20px;\n        border-left: 6px solid #9e9e9e;\n    }\n\n    .section-header {\n        margin-top: 25px;\n        margin-bottom: 15px;\n        border-bottom: 2px solid #e0e0e0;\n        padding-bottom: 8px;\n        color: #424242;\n        font-weight: 500;\n    }\n\n    .empty-message {\n        color: #757575;\n        font-style: italic;\n        padding: 20px;\n        text-align: center;\n        background-color: #f5f5f5;\n        border-radius: 8px;\n    }\n\n    /* Debug info */\n    .debug-info {\n        margin-top: 20px;\n        padding: 10px;\n        background-color: #f8f9fa;\n        border: 1px solid #ddd;\n        border-radius: 4px;\n        font-family: monospace;\n        font-size: 12px;\n        white-space: pre-wrap;\n    }\n\n    /* Recent completions section */\n    .recently-completed {\n        margin-top: 30px;\n    }\n\n    .completed-item {\n        padding: 10px 15px;\n        border-radius: 8px;\n        background-color: #f5f5f5;\n        margin-bottom: 10px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n    }\n\n    .completed-title {\n        color: #757575;\n        text-decoration: line-through;\n        margin-right: 10px;\n    }\n\n    .completed-time {\n        font-size: 12px;\n        color: #9e9e9e;\n    }\n</style>\n\n<div class=\"suggestions-panel\">\n    <h2>AI-Powered Insights</h2>\n\n    <div ng-if=\"parsedPayload.automation_suggestions && parsedPayload.automation_suggestions.length > 0\">\n        <h3 class=\"section-header\">Automation Opportunities</h3>\n        <div ng-repeat=\"suggestion in parsedPayload.automation_suggestions\">\n            <div class=\"suggestion-item\">\n                <div>\n                    <span class=\"suggestion-title\">{{suggestion.template}}</span>\n                    <span class=\"suggestion-confidence\">{{suggestion.automation_confidence}}% confidence</span>\n                </div>\n                <p class=\"similar-tasks\">Found {{suggestion.similar_tasks}} similar tasks</p>\n                <div ng-if=\"suggestion.examples && suggestion.examples.length > 0\">\n                    <p><strong>Examples:</strong></p>\n                    <ul>\n                        <li ng-repeat=\"example in suggestion.examples | limitTo:2\">{{example}}</li>\n                    </ul>\n                </div>\n                <div ng-if=\"suggestion.avg_completion_time\">\n                    <p>Average completion time: {{(suggestion.avg_completion_time / 60).toFixed(1)}} minutes</p>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div ng-if=\"parsedPayload.priority_recommendations && parsedPayload.priority_recommendations.length > 0\">\n        <h3 class=\"section-header\">Priority Recommendations</h3>\n        <div ng-repeat=\"rec in parsedPayload.priority_recommendations\">\n            <div class=\"recommendation-item\">\n                <span class=\"recommendation-title\">{{rec.description}}</span>\n                <div class=\"recommendation-details\">\n                    <div class=\"priority-change\">\n                        <span>Current:</span>\n                        <span class=\"priority-badge priority-{{rec.current_priority}}\">{{rec.current_priority}}</span>\n                        <span class=\"priority-arrow\">→</span>\n                        <span>Recommended:</span>\n                        <span class=\"priority-badge priority-{{rec.recommended_priority}}\">{{rec.recommended_priority}}</span>\n                    </div>\n                    <div style=\"margin-left: auto;\">\n                        <span class=\"suggestion-confidence\">{{rec.confidence}}% match</span>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div ng-if=\"parsedPayload.pattern_analysis && parsedPayload.pattern_analysis.total_patterns > 0\">\n        <div class=\"pattern-summary\">\n            <p><strong>Pattern Analysis:</strong> Found {{parsedPayload.pattern_analysis.total_patterns}} recurring\n                patterns across {{parsedPayload.pattern_analysis.analyzed_todos}} completed todos.</p>\n        </div>\n    </div>\n\n    <!-- Recently completed section from MongoDB4 backend -->\n    <div class=\"recently-completed\" ng-if=\"parsedPayload.completed && parsedPayload.completed.length > 0\">\n        <h3 class=\"section-header\">Recently Completed Tasks</h3>\n        <div ng-repeat=\"item in parsedPayload.completed | limitTo:5\" class=\"completed-item\">\n            <div class=\"completed-title\">{{item.description}}</div>\n            <div class=\"completed-time\" ng-if=\"item.completed_at\">\n                {{item.completed_at | date:'MMM d, h:mm a'}}\n            </div>\n        </div>\n    </div>\n\n    <div ng-if=\"(!parsedPayload.automation_suggestions || parsedPayload.automation_suggestions.length === 0) &&\n              (!parsedPayload.priority_recommendations || parsedPayload.priority_recommendations.length === 0)\">\n        <div class=\"empty-message\">\n            <p>No AI suggestions available yet. Complete more tasks to generate insights and recommendations.</p>\n            <p>The AI assistant analyzes your task completion patterns to identify opportunities for automation and\n                optimization.</p>\n        </div>\n    </div>\n\n    <!-- Debug section to help troubleshoot data flow -->\n    <div class=\"debug-info\">\n        <div>Topic: {{msg.topic}}</div>\n        <div>Raw Payload: {{msg.payload}}</div>\n        <div>Automation Suggestions: {{(parsedPayload.automation_suggestions || []).length}}</div>\n        <div>Priority Recommendations: {{(parsedPayload.priority_recommendations || []).length}}</div>\n        <div>Analyzed Todos: {{parsedPayload.pattern_analysis.analyzed_todos || 0}}</div>\n        <div>Completed Tasks: {{(parsedPayload.completed || []).length}}</div>\n    </div>\n</div>\n\n<!--\nNode-RED Message Format:\n{\n  \"automation_suggestions\": [\n    {\n      \"pattern_id\": \"123\",\n      \"similar_tasks\": 5,\n      \"template\": \"Daily progress report\",\n      \"automation_confidence\": 85,\n      \"examples\": [\"Submit daily report\", \"Send progress update\"]\n    }\n  ],\n  \"priority_recommendations\": [\n    {\n      \"todo_id\": \"456\",\n      \"description\": \"Review project proposal\",\n      \"current_priority\": \"medium\",\n      \"recommended_priority\": \"high\",\n      \"confidence\": 75\n    }\n  ],\n  \"pattern_analysis\": {\n    \"total_patterns\": 3,\n    \"analyzed_todos\": 25\n  }\n}\n-->",
        "storeOutMessages": true,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 502.00001525878906,
        "y": 546.000072479248,
        "wires": [
            [
                "013bc675b103b356"
            ]
        ]
    },
    {
        "id": "8de09bc2448e4bdb",
        "type": "ui_template",
        "z": "0869aabc883a8824",
        "group": "g-schedule",
        "name": "Daily Schedule",
        "order": 1,
        "width": 12,
        "height": "20",
        "format": "<!-- Daily Schedule Panel for FastMCP Todo Server Dashboard -->\n\n<script>\n    (function(scope) {\n    // Parse JSON payload if it's a string\n    scope.$watch('msg.payload', function(payload) {\n      if (payload && typeof payload === 'string') {\n        try {\n          scope.parsedPayload = JSON.parse(payload);\n        } catch(e) {\n          console.error('Error parsing payload JSON:', e);\n          scope.parsedPayload = {};\n        }\n      } else {\n        scope.parsedPayload = payload || {};\n      }\n    });\n  })(scope);\n</script>\n\n<style>\n    .schedule-panel {\n        font-family: 'Roboto', sans-serif;\n        padding: 0 10px;\n    }\n\n    .schedule-header {\n        margin-bottom: 20px;\n    }\n\n    .schedule-date {\n        font-size: 22px;\n        font-weight: 600;\n        color: #212121;\n        margin-bottom: 5px;\n    }\n\n    .schedule-summary {\n        background-color: #f5f5f5;\n        border-radius: 8px;\n        padding: 15px;\n        margin-bottom: 20px;\n        display: flex;\n        justify-content: space-between;\n        flex-wrap: wrap;\n    }\n\n    .summary-item {\n        margin-right: 20px;\n        margin-bottom: 10px;\n    }\n\n    .summary-label {\n        font-size: 13px;\n        color: #757575;\n        margin-bottom: 5px;\n    }\n\n    .summary-value {\n        font-size: 16px;\n        font-weight: 500;\n        color: #424242;\n    }\n\n    .utilization-bar {\n        background-color: #e0e0e0;\n        height: 8px;\n        border-radius: 4px;\n        width: 100%;\n        margin-top: 15px;\n        overflow: hidden;\n    }\n\n    .utilization-fill {\n        height: 100%;\n        background-color: #4caf50;\n        border-radius: 4px;\n        transition: width 1s ease-in-out;\n    }\n\n    /* Adjust color based on utilization */\n    .utilization-low {\n        background-color: #8bc34a;\n    }\n\n    .utilization-medium {\n        background-color: #ff9800;\n    }\n\n    .utilization-high {\n        background-color: #f44336;\n    }\n\n    .timeline {\n        position: relative;\n        padding: 20px 0;\n    }\n\n    .timeline::before {\n        content: '';\n        position: absolute;\n        top: 0;\n        bottom: 0;\n        left: 100px;\n        width: 4px;\n        background-color: #e0e0e0;\n        border-radius: 2px;\n    }\n\n    .timeline-item {\n        display: flex;\n        margin-bottom: 20px;\n        position: relative;\n    }\n\n    .timeline-time {\n        position: relative;\n        width: 100px;\n        padding-right: 20px;\n        text-align: right;\n        flex-shrink: 0;\n    }\n\n    .timeline-time-text {\n        font-weight: 500;\n        color: #616161;\n    }\n\n    .timeline-content {\n        flex-grow: 1;\n        background-color: white;\n        border-radius: 8px;\n        padding: 15px;\n        margin-left: 20px;\n        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n        transition: all 0.3s ease;\n    }\n\n    .timeline-content:hover {\n        transform: translateY(-2px);\n        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);\n    }\n\n    .timeline-item::after {\n        content: '';\n        position: absolute;\n        width: 14px;\n        height: 14px;\n        border-radius: 50%;\n        background-color: white;\n        border: 3px solid #9e9e9e;\n        left: 95px;\n        top: 15px;\n        transform: translateX(-50%);\n        z-index: 1;\n    }\n\n    .timeline-item.high::after {\n        border-color: #e53935;\n    }\n\n    .timeline-item.medium::after,\n    .timeline-item.initial::after {\n        border-color: #fb8c00;\n    }\n\n    .timeline-item.low::after {\n        border-color: #43a047;\n    }\n\n    .task-header {\n        display: flex;\n        justify-content: space-between;\n        margin-bottom: 10px;\n    }\n\n    .task-description {\n        font-weight: 500;\n        color: #212121;\n    }\n\n    .task-duration {\n        font-size: 13px;\n        padding: 2px 8px;\n        border-radius: 12px;\n        background-color: #eeeeee;\n        color: #616161;\n    }\n\n    .task-priority {\n        font-size: 12px;\n        text-transform: uppercase;\n        padding: 2px 6px;\n        border-radius: 4px;\n        margin-right: 8px;\n    }\n\n    .task-priority-high {\n        background-color: #ffebee;\n        color: #c62828;\n    }\n\n    .task-priority-medium,\n    .task-priority-initial {\n        background-color: #fff3e0;\n        color: #e65100;\n    }\n\n    .task-priority-low {\n        background-color: #e8f5e9;\n        color: #2e7d32;\n    }\n\n    .break-item {\n        color: #757575;\n        font-style: italic;\n        margin: 10px 0 10px 120px;\n        font-size: 13px;\n    }\n\n    .no-schedule-message {\n        color: #757575;\n        font-style: italic;\n        padding: 20px;\n        text-align: center;\n        background-color: #f5f5f5;\n        border-radius: 8px;\n        margin-top: 20px;\n    }\n\n    /* Debug info */\n    .debug-info {\n        margin-top: 20px;\n        padding: 10px;\n        background-color: #f8f9fa;\n        border: 1px solid #ddd;\n        border-radius: 4px;\n        font-family: monospace;\n        font-size: 12px;\n        white-space: pre-wrap;\n    }\n</style>\n\n<div class=\"schedule-panel\">\n    <div class=\"schedule-header\">\n        <div class=\"schedule-date\">\n            Schedule for {{parsedPayload.date}} <span ng-if=\"parsedPayload.weekday\">({{parsedPayload.weekday}})</span>\n        </div>\n    </div>\n\n    <div class=\"schedule-summary\">\n        <div class=\"summary-item\">\n            <div class=\"summary-label\">Working Hours</div>\n            <div class=\"summary-value\">{{parsedPayload.working_hours.start}} - {{parsedPayload.working_hours.end}}</div>\n        </div>\n\n        <div class=\"summary-item\">\n            <div class=\"summary-label\">Total Tasks</div>\n            <div class=\"summary-value\">{{parsedPayload.total_tasks || 0}}</div>\n        </div>\n\n        <div class=\"summary-item\">\n            <div class=\"summary-label\">Scheduled Time</div>\n            <div class=\"summary-value\">{{parsedPayload.total_scheduled_minutes || 0}} min</div>\n        </div>\n\n        <div class=\"summary-item\">\n            <div class=\"summary-label\">Time Utilization</div>\n            <div class=\"summary-value\">{{parsedPayload.utilization_percentage || 0}}%</div>\n        </div>\n\n        <div style=\"width: 100%;\">\n            <div class=\"utilization-bar\">\n                <div class=\"utilization-fill\" ng-class=\"{\n               'utilization-low': parsedPayload.utilization_percentage < 50,\n               'utilization-medium': parsedPayload.utilization_percentage >= 50 && parsedPayload.utilization_percentage < 80,\n               'utilization-high': parsedPayload.utilization_percentage >= 80\n             }\" ng-style=\"{'width': (parsedPayload.utilization_percentage || 0) + '%'}\">\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <div class=\"timeline\" ng-if=\"parsedPayload.schedule && parsedPayload.schedule.length > 0\">\n        <div ng-repeat=\"task in parsedPayload.schedule\">\n            <div class=\"timeline-item {{task.priority}}\">\n                <div class=\"timeline-time\">\n                    <span class=\"timeline-time-text\">{{task.start_time}}</span>\n                </div>\n                <div class=\"timeline-content\">\n                    <div class=\"task-header\">\n                        <div>\n                            <span class=\"task-description\">{{task.description}}</span>\n                        </div>\n                        <div>\n                            <span class=\"task-priority task-priority-{{task.priority}}\">{{task.priority}}</span>\n                            <span class=\"task-duration\">{{task.duration_minutes}} min</span>\n                        </div>\n                    </div>\n                    <div ng-if=\"task.notes\" class=\"task-notes\">\n                        {{task.notes}}\n                    </div>\n                </div>\n            </div>\n\n            <!-- Add break between tasks if not the last task -->\n            <div class=\"break-item\" ng-if=\"!$last\">\n                <i class=\"fa fa-coffee\"></i> 15-minute break\n            </div>\n        </div>\n    </div>\n\n    <div ng-if=\"!parsedPayload.schedule || parsedPayload.schedule.length === 0\" class=\"no-schedule-message\">\n        <p>No tasks scheduled for this day.</p>\n        <p>Use the date picker to select a different day or add more pending tasks to generate a schedule.</p>\n    </div>\n\n    <!-- Debug section to help troubleshoot data flow -->\n    <div class=\"debug-info\">\n        <div>Topic: {{msg.topic}}</div>\n        <div>Raw Payload: {{msg.payload}}</div>\n        <div>Date: {{parsedPayload.date}}</div>\n        <div>Scheduled Tasks: {{(parsedPayload.schedule || []).length}}</div>\n        <div>Total Minutes: {{parsedPayload.total_scheduled_minutes || 0}}</div>\n        <div>Utilization: {{parsedPayload.utilization_percentage || 0}}%</div>\n    </div>\n</div>\n\n<!--\nNode-RED Message Format:\n{\n  \"date\": \"2023-05-15\",\n  \"weekday\": \"Monday\",\n  \"working_hours\": {\n    \"start\": \"09:00\",\n    \"end\": \"17:00\"\n  },\n  \"schedule\": [\n    {\n      \"todo_id\": \"123\",\n      \"description\": \"Review project proposal\",\n      \"priority\": \"high\",\n      \"start_time\": \"09:30\",\n      \"end_time\": \"10:30\",\n      \"duration_minutes\": 60,\n      \"notes\": \"Pay attention to budget section\"\n    },\n    {\n      \"todo_id\": \"456\",\n      \"description\": \"Team meeting\",\n      \"priority\": \"medium\",\n      \"start_time\": \"11:00\",\n      \"end_time\": \"12:00\",\n      \"duration_minutes\": 60\n    }\n  ],\n  \"total_tasks\": 2,\n  \"total_scheduled_minutes\": 120,\n  \"available_minutes\": 480,\n  \"utilization_percentage\": 25\n}\n-->",
        "storeOutMessages": true,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 502.00001525878906,
        "y": 586.000072479248,
        "wires": [
            [
                "013bc675b103b356"
            ]
        ]
    },
    {
        "id": "373f8631915daeef",
        "type": "function",
        "z": "0869aabc883a8824",
        "name": "Handle Todo Actions",
        "func": "const action = msg.payload.action;\nconst todoId = msg.payload.id;\n\nlet topic = '';\nlet newMsg = { payload: {} };\n\nswitch(action) {\n    case 'complete':\n        topic = 'todo/action/complete';\n        newMsg.payload = { id: todoId };\n        break;\n    case 'suggestions':\n        topic = 'todo/action/suggestions';\n        newMsg.payload = { id: todoId };\n        break;\n    case 'schedule':\n        topic = 'todo/action/schedule';\n        newMsg.payload = { id: todoId };\n        break;\n    default:\n        return null;\n}\n\nnewMsg.topic = topic;\nreturn newMsg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 702.0000152587891,
        "y": 506.00007247924805,
        "wires": [
            [
                "357e46e6ec2d1923",
                "0858e9dba503acd7"
            ]
        ]
    },
    {
        "id": "357e46e6ec2d1923",
        "type": "mqtt out",
        "z": "0869aabc883a8824",
        "d": true,
        "name": "Send Action",
        "topic": "",
        "qos": "1",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "5b41a831.e6efd8",
        "x": 887.9999923706055,
        "y": 461,
        "wires": []
    },
    {
        "id": "0425d18194c283af",
        "type": "ui_date_picker",
        "z": "0869aabc883a8824",
        "name": "Select Date",
        "label": "Schedule Date (or 'All')",
        "group": "g-controls",
        "order": 1,
        "width": 12,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "x": 1050.000099182129,
        "y": 399.00020027160645,
        "wires": [
            [
                "05a5c5dad5f5eb17"
            ]
        ]
    },
    {
        "id": "05a5c5dad5f5eb17",
        "type": "function",
        "z": "0869aabc883a8824",
        "name": "Format for Schedule",
        "func": "// Check if payload is a date or null/undefined\nlet formattedDate = 'all';\n\nif (msg.payload && msg.payload !== 'all') {\n    const date = new Date(msg.payload);\n    formattedDate = date.toISOString().split('T')[0];\n}\n\nreturn {\n    topic: 'todo/action/daily_schedule',\n    payload: {\n        date: formattedDate\n    }\n};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260.000099182129,
        "y": 379.00020027160645,
        "wires": [
            [
                "51058998e65ffcc1"
            ]
        ]
    },
    {
        "id": "dd896c93c05a6e6e",
        "type": "ui_button",
        "z": "0869aabc883a8824",
        "name": "Show All",
        "group": "g-controls",
        "order": 4,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Show All",
        "tooltip": "Show todos from all dates",
        "color": "",
        "bgcolor": "",
        "icon": "calendar",
        "payload": "all",
        "payloadType": "str",
        "topic": "todo/action/daily_schedule",
        "x": 1040.000099182129,
        "y": 359.00020027160645,
        "wires": [
            [
                "05a5c5dad5f5eb17"
            ]
        ]
    },
    {
        "id": "8d92db12cc0c194e",
        "type": "ui_button",
        "z": "0869aabc883a8824",
        "name": "Refresh Todos",
        "group": "g-controls",
        "order": 6,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Refresh Todo List",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "refresh",
        "payload": "1",
        "payloadType": "str",
        "topic": "todo/action/refresh_todos",
        "x": 1060.000099182129,
        "y": 279.00020027160645,
        "wires": [
            [
                "51058998e65ffcc1"
            ]
        ]
    },
    {
        "id": "c6fbb506f5873327",
        "type": "ui_button",
        "z": "0869aabc883a8824",
        "name": "Refresh Suggestions",
        "group": "g-controls",
        "order": 2,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "Refresh Suggestions",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "refresh",
        "payload": "1",
        "payloadType": "json",
        "topic": "todo/action/refresh_suggestions",
        "x": 1080.000099182129,
        "y": 319.00020027160645,
        "wires": [
            [
                "51058998e65ffcc1"
            ]
        ]
    },
    {
        "id": "013bc675b103b356",
        "type": "debug",
        "z": "0869aabc883a8824",
        "name": "todo-html-out",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 667.0000152587891,
        "y": 546.000072479248,
        "wires": [],
        "l": false
    },
    {
        "id": "4d9464880ad448ab",
        "type": "link in",
        "z": "0869aabc883a8824",
        "name": "actions-sub",
        "links": [
            "51058998e65ffcc1",
            "0858e9dba503acd7"
        ],
        "x": 175,
        "y": 100,
        "wires": [
            [
                "2f37800e8acb5d1e",
                "0d86d708a3175966"
            ]
        ]
    },
    {
        "id": "42b5f5036f5e065c",
        "type": "link out",
        "z": "0869aabc883a8824",
        "name": "dashboard-pub",
        "mode": "link",
        "links": [
            "dd21683491b5f139"
        ],
        "x": 1395,
        "y": 160,
        "wires": []
    },
    {
        "id": "dd21683491b5f139",
        "type": "link in",
        "z": "0869aabc883a8824",
        "name": "dashboard-sub",
        "links": [
            "42b5f5036f5e065c",
            "c9bb2d804fe2695f"
        ],
        "x": 147.00001525878906,
        "y": 526.000072479248,
        "wires": [
            [
                "df5047691ee23252",
                "4dc4232e096438e5"
            ]
        ]
    },
    {
        "id": "51058998e65ffcc1",
        "type": "link out",
        "z": "0869aabc883a8824",
        "name": "action-pub",
        "mode": "link",
        "links": [
            "4d9464880ad448ab"
        ],
        "x": 1311.0000762939453,
        "y": 314.0001277923584,
        "wires": []
    },
    {
        "id": "544b7177e0b51a95",
        "type": "debug",
        "z": "0869aabc883a8824",
        "name": "publish-to-dashboard-debug",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": true,
        "complete": "true",
        "targetType": "full",
        "statusVal": "payload",
        "statusType": "auto",
        "x": 1265,
        "y": 100,
        "wires": [],
        "l": false
    },
    {
        "id": "c9bb2d804fe2695f",
        "type": "link out",
        "z": "0869aabc883a8824",
        "name": "dashboard-pub",
        "mode": "link",
        "links": [
            "dd21683491b5f139"
        ],
        "x": 965,
        "y": 200,
        "wires": []
    },
    {
        "id": "0858e9dba503acd7",
        "type": "link out",
        "z": "0869aabc883a8824",
        "name": "action-pub",
        "mode": "link",
        "links": [
            "4d9464880ad448ab"
        ],
        "x": 837.0000152587891,
        "y": 506.00007247924805,
        "wires": []
    },
    {
        "id": "5b41a831.e6efd8",
        "type": "mqtt-broker",
        "name": "eaws",
        "broker": "localhost",
        "port": "3003",
        "clientid": "local-node-red",
        "autoConnect": true,
        "usetls": false,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": false,
        "autoUnsubscribe": true,
        "birthTopic": "status/DvtLabMonitor/alive",
        "birthQos": "1",
        "birthRetain": "true",
        "birthPayload": "1",
        "birthMsg": {},
        "closeTopic": "status/DvtLabMonitor/alive",
        "closeQos": "1",
        "closeRetain": "true",
        "closePayload": "0",
        "closeMsg": {},
        "willTopic": "status/DvtLabMonitor/alive",
        "willQos": "1",
        "willRetain": "true",
        "willPayload": "0",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "1cdab81a6028b016",
        "type": "mongodb4-client",
        "name": "swarmonomicon",
        "protocol": "mongodb",
        "hostname": "127.0.0.1",
        "port": "",
        "dbName": "swarmonomicon",
        "appName": "",
        "authSource": "",
        "authMechanism": "DEFAULT",
        "tls": false,
        "tlsCAFile": "",
        "tlsCertificateKeyFile": "",
        "tlsInsecure": false,
        "connectTimeoutMS": "30000",
        "socketTimeoutMS": "0",
        "minPoolSize": "0",
        "maxPoolSize": "100",
        "maxIdleTimeMS": "0",
        "uri": "",
        "advanced": "{}",
        "uriTabActive": "tab-uri-simple"
    },
    {
        "id": "g-todos",
        "type": "ui_group",
        "name": "Todo List",
        "tab": "t-dashboard",
        "order": 1,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "g-suggestions",
        "type": "ui_group",
        "name": "AI Suggestions",
        "tab": "t-dashboard",
        "order": 2,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "g-schedule",
        "type": "ui_group",
        "name": "Daily Schedule",
        "tab": "t-dashboard",
        "order": 3,
        "disp": true,
        "width": 12,
        "collapse": false
    },
    {
        "id": "g-controls",
        "type": "ui_group",
        "name": "Dashboard Controls",
        "tab": "t-dashboard",
        "order": 4,
        "disp": true,
        "width": "12",
        "collapse": false
    },
    {
        "id": "t-dashboard",
        "type": "ui_tab",
        "name": "FastMCP Todo Dashboard",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    }
]
